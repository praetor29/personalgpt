{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.diffFactory = exports.diff = exports.arrDiff = void 0;\nvar reduceify_1 = require(\"./reduceify\");\nvar contains_1 = require(\"./contains\");\nvar removeDuplicates_1 = require(\"./removeDuplicates\");\nvar id_1 = require(\"tsafe/id\");\nvar areStrictEqual = function (e1, e2) {\n  return e1 === e2;\n};\n/** WARNING: Providing areEquals significantly impact performances */\nfunction arrDiff(arr, newArr, areEquals) {\n  if (areEquals === void 0) {\n    areEquals = areStrictEqual;\n  }\n  var arrDiff = {\n    \"added\": (0, id_1.id)([]),\n    \"removed\": (0, id_1.id)([])\n  };\n  if (arr.length === newArr.length && arr.every(function (elem, i) {\n    return areEquals(elem, newArr[i]);\n  })) {\n    return arrDiff;\n  }\n  if (areEquals !== areStrictEqual) {\n    return {\n      \"added\": newArr.reduce.apply(newArr, __spreadArray([], __read((0, removeDuplicates_1.removeDuplicates)(areEquals)), false)).filter(function (newEntry) {\n        return !arr.reduce.apply(arr, __spreadArray([], __read((0, contains_1.contains)(function (entry) {\n          return areEquals(entry, newEntry);\n        })), false));\n      }),\n      \"removed\": arr.reduce.apply(arr, __spreadArray([], __read((0, removeDuplicates_1.removeDuplicates)(areEquals)), false)).filter(function (entry) {\n        return !newArr.reduce.apply(newArr, __spreadArray([], __read((0, contains_1.contains)(function (newEntry) {\n          return areEquals(newEntry, entry);\n        })), false));\n      })\n    };\n  }\n  var arrAsSet = new Set(arr);\n  var newArrAsSet = new Set(newArr);\n  arrAsSet.forEach(function (elem) {\n    if (newArrAsSet.has(elem)) {\n      return;\n    }\n    arrDiff.removed.push(elem);\n  });\n  newArrAsSet.forEach(function (elem) {\n    if (arrAsSet.has(elem)) {\n      return;\n    }\n    arrDiff.added.push(elem);\n  });\n  return arrDiff;\n}\nexports.arrDiff = arrDiff;\nfunction diff(newArr, areEquals) {\n  return (0, reduceify_1.toReduceArguments)(arrDiff, newArr, areEquals);\n}\nexports.diff = diff;\nfunction diffFactory(_a) {\n  var areEquals = _a.areEquals;\n  return {\n    \"diff\": function (newArr) {\n      return diff(newArr, areEquals);\n    }\n  };\n}\nexports.diffFactory = diffFactory;","map":{"version":3,"names":["reduceify_1","require","contains_1","removeDuplicates_1","id_1","areStrictEqual","e1","e2","arrDiff","arr","newArr","areEquals","id","length","every","elem","i","reduce","apply","__spreadArray","__read","removeDuplicates","filter","newEntry","contains","entry","arrAsSet","Set","newArrAsSet","forEach","has","removed","push","added","exports","diff","toReduceArguments","diffFactory","_a"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\tools\\reducers\\diff.ts"],"sourcesContent":["import { ReduceArguments, toReduceArguments } from \"./reduceify\";\nimport { contains } from \"./contains\";\nimport { removeDuplicates } from \"./removeDuplicates\";\nimport { id } from \"tsafe/id\";\n\nexport type ArrDiff<T> = {\n    added: readonly T[];\n    removed: readonly T[];\n}\n\nconst areStrictEqual = (e1: unknown, e2: unknown) => e1 === e2;\n\n/** WARNING: Providing areEquals significantly impact performances */\nexport function arrDiff<ArrOf>(\n    arr: readonly ArrOf[],\n    newArr: readonly ArrOf[],\n    areEquals: (e1: ArrOf, e2: ArrOf) => boolean = areStrictEqual\n): ArrDiff<ArrOf> {\n\n    const arrDiff = {\n        \"added\": id<ArrOf[]>([]),\n        \"removed\": id<ArrOf[]>([])\n    };\n\n    if (\n        arr.length === newArr.length &&\n        arr.every((elem, i) => areEquals(elem, newArr[i]))\n    ) {\n        return arrDiff;\n    }\n\n    if (areEquals !== areStrictEqual) {\n\n        return {\n            \"added\": newArr\n                .reduce(...removeDuplicates<ArrOf>(areEquals))\n                .filter(newEntry => !arr.reduce(...contains<ArrOf>(entry => areEquals(entry, newEntry)))),\n            \"removed\": arr\n                .reduce(...removeDuplicates<ArrOf>(areEquals))\n                .filter(entry => !newArr.reduce(...contains<ArrOf>(newEntry => areEquals(newEntry, entry))))\n        };\n\n    }\n\n    const arrAsSet = new Set<ArrOf>(arr);\n    const newArrAsSet = new Set(newArr);\n\n    arrAsSet.forEach(elem => {\n\n        if (newArrAsSet.has(elem)) {\n            return;\n        }\n\n        arrDiff.removed.push(elem);\n\n    });\n\n    newArrAsSet.forEach(elem => {\n\n        if (arrAsSet.has(elem)) {\n            return;\n        }\n\n        arrDiff.added.push(elem);\n\n    });\n\n    return arrDiff;\n\n}\n\nexport function diff<ArrOf>(\n    newArr: readonly ArrOf[],\n    areEquals?: (e1: ArrOf, e2: ArrOf) => boolean\n): ReduceArguments<ArrOf, ArrDiff<ArrOf>> {\n    return toReduceArguments(arrDiff, newArr, areEquals);\n}\n\nexport function diffFactory({ areEquals }: { areEquals: <T>(e1: T, e2: T) => boolean; }) {\n    return { \"diff\": <ArrOf>(newArr: readonly ArrOf[]) => diff<ArrOf>(newArr, areEquals) };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}