{"ast":null,"code":"import { classnames } from \"./tools/classnames\";\nimport { serializeStyles } from \"@emotion/serialize\";\nimport { insertStyles, getRegisteredStyles } from \"@emotion/utils\";\nimport { useGuaranteedMemo } from \"./tools/useGuaranteedMemo\";\nimport { matchCSSObject } from \"./types\";\nexport const {\n  createCssAndCx\n} = (() => {\n  function merge(registered, css, className) {\n    const registeredStyles = [];\n    const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n    if (registeredStyles.length < 2) {\n      return className;\n    }\n    return rawClassName + css(registeredStyles);\n  }\n  function createCssAndCx(params) {\n    const {\n      cache\n    } = params;\n    const css = (...args) => {\n      const serialized = serializeStyles(args, cache.registered);\n      insertStyles(cache, serialized, false);\n      const className = `${cache.key}-${serialized.name}`;\n      scope: {\n        const arg = args[0];\n        if (!matchCSSObject(arg)) {\n          break scope;\n        }\n        increaseSpecificityToTakePrecedenceOverMediaQueries.saveClassNameCSSObjectMapping(cache, className, arg);\n      }\n      return className;\n    };\n    const cx = (...args) => {\n      const className = classnames(args);\n      const feat27FixedClassnames = increaseSpecificityToTakePrecedenceOverMediaQueries.fixClassName(cache, className, css);\n      return merge(cache.registered, css, feat27FixedClassnames);\n      //return merge(cache.registered, css, className);\n    };\n\n    return {\n      css,\n      cx\n    };\n  }\n  return {\n    createCssAndCx\n  };\n})();\nexport function createUseCssAndCx(params) {\n  const {\n    useCache\n  } = params;\n  function useCssAndCx() {\n    const cache = useCache();\n    const {\n      css,\n      cx\n    } = useGuaranteedMemo(() => createCssAndCx({\n      cache\n    }), [cache]);\n    return {\n      css,\n      cx\n    };\n  }\n  return {\n    useCssAndCx\n  };\n}\n// https://github.com/garronej/tss-react/issues/27\nconst increaseSpecificityToTakePrecedenceOverMediaQueries = (() => {\n  const cssObjectMapByCache = new WeakMap();\n  return {\n    \"saveClassNameCSSObjectMapping\": (cache, className, cssObject) => {\n      let cssObjectMap = cssObjectMapByCache.get(cache);\n      if (cssObjectMap === undefined) {\n        cssObjectMap = new Map();\n        cssObjectMapByCache.set(cache, cssObjectMap);\n      }\n      cssObjectMap.set(className, cssObject);\n    },\n    \"fixClassName\": (() => {\n      function fix(classNameCSSObjects) {\n        let isThereAnyMediaQueriesInPreviousClasses = false;\n        return classNameCSSObjects.map(([className, cssObject]) => {\n          if (cssObject === undefined) {\n            return className;\n          }\n          let out;\n          if (!isThereAnyMediaQueriesInPreviousClasses) {\n            out = className;\n            for (const key in cssObject) {\n              if (key.startsWith(\"@media\")) {\n                isThereAnyMediaQueriesInPreviousClasses = true;\n                break;\n              }\n            }\n          } else {\n            out = {\n              \"&&\": cssObject\n            };\n          }\n          return out;\n        });\n      }\n      return (cache, className, css) => {\n        const cssObjectMap = cssObjectMapByCache.get(cache);\n        return classnames(fix(className.split(\" \").map(className => [className, cssObjectMap === null || cssObjectMap === void 0 ? void 0 : cssObjectMap.get(className)])).map(classNameOrCSSObject => typeof classNameOrCSSObject === \"string\" ? classNameOrCSSObject : css(classNameOrCSSObject)));\n      };\n    })()\n  };\n})();","map":{"version":3,"names":["classnames","serializeStyles","insertStyles","getRegisteredStyles","useGuaranteedMemo","matchCSSObject","createCssAndCx","merge","registered","css","className","registeredStyles","rawClassName","length","params","cache","args","serialized","key","name","scope","arg","increaseSpecificityToTakePrecedenceOverMediaQueries","saveClassNameCSSObjectMapping","cx","feat27FixedClassnames","fixClassName","createUseCssAndCx","useCache","useCssAndCx","cssObjectMapByCache","WeakMap","cssObject","cssObjectMap","get","undefined","Map","set","fix","classNameCSSObjects","isThereAnyMediaQueriesInPreviousClasses","map","out","startsWith","split","classNameOrCSSObject"],"sources":["C:/Users/prana/repos/personalgpt/.yarn/__virtual__/tss-react-virtual-49b89c7fcb/3/AppData/Local/Yarn/Berry/cache/tss-react-npm-4.9.3-3edfb0a633-10c0.zip/node_modules/tss-react/esm/cssAndCx.js"],"sourcesContent":["import { classnames } from \"./tools/classnames\";\nimport { serializeStyles } from \"@emotion/serialize\";\nimport { insertStyles, getRegisteredStyles } from \"@emotion/utils\";\nimport { useGuaranteedMemo } from \"./tools/useGuaranteedMemo\";\nimport { matchCSSObject } from \"./types\";\nexport const { createCssAndCx } = (() => {\n    function merge(registered, css, className) {\n        const registeredStyles = [];\n        const rawClassName = getRegisteredStyles(registered, registeredStyles, className);\n        if (registeredStyles.length < 2) {\n            return className;\n        }\n        return rawClassName + css(registeredStyles);\n    }\n    function createCssAndCx(params) {\n        const { cache } = params;\n        const css = (...args) => {\n            const serialized = serializeStyles(args, cache.registered);\n            insertStyles(cache, serialized, false);\n            const className = `${cache.key}-${serialized.name}`;\n            scope: {\n                const arg = args[0];\n                if (!matchCSSObject(arg)) {\n                    break scope;\n                }\n                increaseSpecificityToTakePrecedenceOverMediaQueries.saveClassNameCSSObjectMapping(cache, className, arg);\n            }\n            return className;\n        };\n        const cx = (...args) => {\n            const className = classnames(args);\n            const feat27FixedClassnames = increaseSpecificityToTakePrecedenceOverMediaQueries.fixClassName(cache, className, css);\n            return merge(cache.registered, css, feat27FixedClassnames);\n            //return merge(cache.registered, css, className);\n        };\n        return { css, cx };\n    }\n    return { createCssAndCx };\n})();\nexport function createUseCssAndCx(params) {\n    const { useCache } = params;\n    function useCssAndCx() {\n        const cache = useCache();\n        const { css, cx } = useGuaranteedMemo(() => createCssAndCx({ cache }), [cache]);\n        return { css, cx };\n    }\n    return { useCssAndCx };\n}\n// https://github.com/garronej/tss-react/issues/27\nconst increaseSpecificityToTakePrecedenceOverMediaQueries = (() => {\n    const cssObjectMapByCache = new WeakMap();\n    return {\n        \"saveClassNameCSSObjectMapping\": (cache, className, cssObject) => {\n            let cssObjectMap = cssObjectMapByCache.get(cache);\n            if (cssObjectMap === undefined) {\n                cssObjectMap = new Map();\n                cssObjectMapByCache.set(cache, cssObjectMap);\n            }\n            cssObjectMap.set(className, cssObject);\n        },\n        \"fixClassName\": (() => {\n            function fix(classNameCSSObjects) {\n                let isThereAnyMediaQueriesInPreviousClasses = false;\n                return classNameCSSObjects.map(([className, cssObject]) => {\n                    if (cssObject === undefined) {\n                        return className;\n                    }\n                    let out;\n                    if (!isThereAnyMediaQueriesInPreviousClasses) {\n                        out = className;\n                        for (const key in cssObject) {\n                            if (key.startsWith(\"@media\")) {\n                                isThereAnyMediaQueriesInPreviousClasses = true;\n                                break;\n                            }\n                        }\n                    }\n                    else {\n                        out = {\n                            \"&&\": cssObject\n                        };\n                    }\n                    return out;\n                });\n            }\n            return (cache, className, css) => {\n                const cssObjectMap = cssObjectMapByCache.get(cache);\n                return classnames(fix(className\n                    .split(\" \")\n                    .map(className => [\n                    className,\n                    cssObjectMap === null || cssObjectMap === void 0 ? void 0 : cssObjectMap.get(className)\n                ])).map(classNameOrCSSObject => typeof classNameOrCSSObject === \"string\"\n                    ? classNameOrCSSObject\n                    : css(classNameOrCSSObject)));\n            };\n        })()\n    };\n})();\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}