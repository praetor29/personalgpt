{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.to = void 0;\n/*\nNOTE: Here we allow a tiny memory leak to be able to emulate\nthe EventEmitter.removeListener(event, callback) method easily.\n\nevt.getHandlers()\n    .filter(handler => (\n        handler.callback === callback &&\n        handler.op === to(\"event1\")\n    ))\n    .forEach(handler => handler.detach());\n*/\nvar map = new Map();\n/**\n * Operator that helps emulate an EventEmitter with EVT\n * See https://stackblitz.com/edit/evt-honvv3?file=index.ts\n * or https://docs.evt.land/extending_evt\n * */\nvar to = function (eventName) {\n  var _a;\n  return (_a = map.get(eventName)) !== null && _a !== void 0 ? _a : (map.set(eventName, function (data) {\n    return data[0] !== eventName ? null : [data[1]];\n  }), (0, exports.to)(eventName));\n};\nexports.to = to;","map":{"version":3,"names":["map","Map","to","eventName","_a","get","set","data","exports"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\operators\\to.ts"],"sourcesContent":["import type { Operator } from \"../lib/types\";\n/*\nNOTE: Here we allow a tiny memory leak to be able to emulate\nthe EventEmitter.removeListener(event, callback) method easily.\n\nevt.getHandlers()\n    .filter(handler => (\n        handler.callback === callback && \n        handler.op === to(\"event1\")\n    ))\n    .forEach(handler => handler.detach());\n*/\nconst map = new Map<string, ReturnType<typeof to>>();\n\n/** \n * Operator that helps emulate an EventEmitter with EVT\n * See https://stackblitz.com/edit/evt-honvv3?file=index.ts \n * or https://docs.evt.land/extending_evt\n * */\nexport const to = <T extends readonly [string, any], K extends T[0]>(\n    eventName: K\n): Operator.fÎ».Stateless<T, (Extract<T, readonly [K, any]> extends never ? T : Extract<T, readonly [K, any]>)[1]> =>\n    map.get(eventName) ?? (\n        map.set(\n            eventName,\n            data => data[0] !== eventName ? null : [data[1]]\n        ),\n        to(eventName)\n    )\n    ;\n"],"mappings":";;;;;;AACA;;;;;;;;;;;AAWA,IAAMA,GAAG,GAAG,IAAIC,GAAG,EAAiC;AAEpD;;;;;AAKO,IAAMC,EAAE,GAAG,SAAAA,CACdC,SAAY;;EAEZ,QAAAC,EAAA,GAAAJ,GAAG,CAACK,GAAG,CAACF,SAAS,CAAC,cAAAC,EAAA,cAAAA,EAAA,IACdJ,GAAG,CAACM,GAAG,CACHH,SAAS,EACT,UAAAI,IAAI;IAAI,OAAAA,IAAI,CAAC,CAAC,CAAC,KAAKJ,SAAS,GAAG,IAAI,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;EAAxC,CAAwC,CACnD,EACD,IAAAC,OAAA,CAAAN,EAAE,EAACC,SAAS,CAAC,CAChB;CAAA;AATQK,OAAA,CAAAN,EAAE,GAAAA,EAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}