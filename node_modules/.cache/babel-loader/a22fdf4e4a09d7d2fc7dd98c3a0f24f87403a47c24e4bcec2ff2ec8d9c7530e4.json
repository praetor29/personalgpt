{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useArrayDiff = void 0;\nvar react_1 = require(\"react\");\nvar evt_1 = require(\"evt\");\nvar hooks_1 = require(\"evt/hooks\");\nvar diff_1 = require(\"evt/tools/reducers/diff\");\nvar useConstCallback_1 = require(\"./useConstCallback\");\nfunction useArrayDiff(params) {\n  var watchFor = params.watchFor,\n    array = params.array,\n    callback = params.callback;\n  var constCallback = (0, useConstCallback_1.useConstCallback)(callback);\n  var _a = __read((0, react_1.useState)(function () {\n      return evt_1.Evt.create(array);\n    }), 1),\n    evtArray = _a[0];\n  (0, react_1.useEffect)(function () {\n    evtArray.state = __spreadArray([], __read(array), false);\n  }, [array]);\n  (0, hooks_1.useEvt)(function (ctx) {\n    return evtArray.evtDiff.pipe(ctx, function (_a) {\n      var prevState = _a.prevState,\n        newState = _a.newState;\n      return [(0, diff_1.arrDiff)(prevState, newState)];\n    }).attach(function (_a) {\n      var added = _a.added,\n        removed = _a.removed;\n      switch (watchFor) {\n        case \"addition\":\n          if (added.length === 0) {\n            return;\n          }\n          break;\n        case \"deletion\":\n          if (removed.length === 0) {\n            return;\n          }\n          break;\n        case \"addition or deletion\":\n          if (removed.length === 0 && added.length === 0) {\n            return;\n          }\n          break;\n      }\n      constCallback({\n        \"added\": __spreadArray([], __read(added), false),\n        \"removed\": __spreadArray([], __read(removed), false)\n      });\n    });\n  }, [evtArray, watchFor]);\n}\nexports.useArrayDiff = useArrayDiff;","map":{"version":3,"names":["react_1","require","evt_1","hooks_1","diff_1","useConstCallback_1","useArrayDiff","params","watchFor","array","callback","constCallback","useConstCallback","_a","__read","useState","Evt","create","evtArray","useEffect","state","__spreadArray","useEvt","ctx","evtDiff","pipe","prevState","newState","arrDiff","attach","added","removed","length","exports"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\powerhooks-npm-0.20.32-d63ff31bfd-10c0.zip\\node_modules\\powerhooks\\src\\useArrayDiff.ts"],"sourcesContent":["import { useState, useEffect } from \"react\";\nimport { Evt } from \"evt\";\nimport { useEvt } from \"evt/hooks\";\nimport { arrDiff } from \"evt/tools/reducers/diff\";\nimport { useConstCallback } from \"./useConstCallback\";\n\nexport type UseArrayDiffCallbackParams<ArrOf> = {\n    added: ArrOf[];\n    removed: ArrOf[];\n};\n\n/** \n * NOTE: Callback does not need to be constant.\n * WARNING: This hooks will only works with arrays that changes refs when updated.\n * */\nexport function useArrayDiff<ArrOf>(\n    params: {\n        watchFor: \"addition\";\n        array: ArrOf[],\n        callback(params: Pick<UseArrayDiffCallbackParams<ArrOf>, \"added\">): void;\n    }\n): void;\nexport function useArrayDiff<ArrOf>(\n    params: {\n        watchFor: \"deletion\";\n        array: ArrOf[],\n        callback(params: Pick<UseArrayDiffCallbackParams<ArrOf>, \"removed\">): void;\n    }\n): void;\nexport function useArrayDiff<ArrOf>(\n    params: {\n        watchFor: \"addition or deletion\";\n        array: ArrOf[],\n        callback(params: UseArrayDiffCallbackParams<ArrOf>): void;\n    }\n): void;\nexport function useArrayDiff<ArrOf>(\n    params: {\n        watchFor?: \"addition\" | \"deletion\" | \"addition or deletion\";\n        array: ArrOf[],\n        callback(params: UseArrayDiffCallbackParams<ArrOf>): void;\n    }\n): void {\n\n    const { watchFor, array, callback } = params\n\n    const constCallback = useConstCallback(callback);\n\n\n    const [evtArray] = useState(() => Evt.create(array));\n\n    useEffect(\n        () => { evtArray.state= [...array]; },\n        [array]\n    );\n\n\n    useEvt(\n        ctx => evtArray\n            .evtDiff\n            .pipe(ctx, ({ prevState, newState }) => [arrDiff(prevState, newState)])\n            .attach(({ added, removed }) => {\n\n                switch (watchFor) {\n                    case \"addition\":\n                        if (added.length === 0) {\n                            return;\n                        }\n                        break;\n                    case \"deletion\":\n                        if (removed.length === 0) {\n                            return;\n                        }\n                        break;\n                    case \"addition or deletion\":\n                        if (\n                            removed.length === 0 &&\n                            added.length === 0\n                        ) {\n                            return;\n                        }\n                        break;\n                }\n\n                constCallback({\n                    \"added\": [...added],\n                    \"removed\": [...removed]\n                });\n\n\n            }),\n        [evtArray, watchFor]\n    );\n\n\n}\n\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,OAAA,GAAAC,OAAA;AACA,IAAAC,KAAA,GAAAD,OAAA;AACA,IAAAE,OAAA,GAAAF,OAAA;AACA,IAAAG,MAAA,GAAAH,OAAA;AACA,IAAAI,kBAAA,GAAAJ,OAAA;AAgCA,SAAgBK,YAAYA,CACxBC,MAIC;EAGO,IAAAC,QAAQ,GAAsBD,MAAM,CAAAC,QAA5B;IAAEC,KAAK,GAAeF,MAAM,CAAAE,KAArB;IAAEC,QAAQ,GAAKH,MAAM,CAAAG,QAAX;EAEjC,IAAMC,aAAa,GAAG,IAAAN,kBAAA,CAAAO,gBAAgB,EAACF,QAAQ,CAAC;EAG1C,IAAAG,EAAA,GAAAC,MAAA,CAAa,IAAAd,OAAA,CAAAe,QAAQ,EAAC;MAAM,OAAAb,KAAA,CAAAc,GAAG,CAACC,MAAM,CAACR,KAAK,CAAC;IAAjB,CAAiB,CAAC;IAA7CS,QAAQ,GAAAL,EAAA,GAAqC;EAEpD,IAAAb,OAAA,CAAAmB,SAAS,EACL;IAAQD,QAAQ,CAACE,KAAK,GAAAC,aAAA,KAAAP,MAAA,CAAML,KAAK,SAAC;EAAE,CAAC,EACrC,CAACA,KAAK,CAAC,CACV;EAGD,IAAAN,OAAA,CAAAmB,MAAM,EACF,UAAAC,GAAG;IAAI,OAAAL,QAAQ,CACVM,OAAO,CACPC,IAAI,CAACF,GAAG,EAAE,UAACV,EAAuB;UAArBa,SAAS,GAAAb,EAAA,CAAAa,SAAA;QAAEC,QAAQ,GAAAd,EAAA,CAAAc,QAAA;MAAO,QAAC,IAAAvB,MAAA,CAAAwB,OAAO,EAACF,SAAS,EAAEC,QAAQ,CAAC,CAAC;IAA9B,CAA8B,CAAC,CACtEE,MAAM,CAAC,UAAChB,EAAkB;UAAhBiB,KAAK,GAAAjB,EAAA,CAAAiB,KAAA;QAAEC,OAAO,GAAAlB,EAAA,CAAAkB,OAAA;MAErB,QAAQvB,QAAQ;QACZ,KAAK,UAAU;UACX,IAAIsB,KAAK,CAACE,MAAM,KAAK,CAAC,EAAE;YACpB;;UAEJ;QACJ,KAAK,UAAU;UACX,IAAID,OAAO,CAACC,MAAM,KAAK,CAAC,EAAE;YACtB;;UAEJ;QACJ,KAAK,sBAAsB;UACvB,IACID,OAAO,CAACC,MAAM,KAAK,CAAC,IACpBF,KAAK,CAACE,MAAM,KAAK,CAAC,EACpB;YACE;;UAEJ;;MAGRrB,aAAa,CAAC;QACV,OAAO,EAAAU,aAAA,KAAAP,MAAA,CAAMgB,KAAK,SAAC;QACnB,SAAS,EAAAT,aAAA,KAAAP,MAAA,CAAMiB,OAAO;OACzB,CAAC;IAGN,CAAC,CAAC;EAhCC,CAgCD,EACN,CAACb,QAAQ,EAAEV,QAAQ,CAAC,CACvB;AAGL;AA3DAyB,OAAA,CAAA3B,YAAA,GAAAA,YAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}