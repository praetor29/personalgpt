{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useEvt = void 0;\nvar lib_1 = require(\"../lib\");\nvar React = __importStar(require(\"react\"));\nvar useEffect = React.useEffect;\n/**\n * https://docs.evt.land/api/react-hooks\n *\n * Provide a Ctx to attach handlers.\n * You should list in deps all the Evt that are\n * susceptible to change ( Evt passed as props\n * or Evt that are react states ) that you use in the\n * factoryOrEffect callback.\n * As for useEffect you should also list every other\n * value that you use.\n * Whenever any value in deps is changed factoryOrEffect\n * is invoked again with the new Evt and the previous handler\n * get detached.\n * All handler are also detached when the component unmount.\n *\n * factoryOrEffect can be used for attaching handler to event\n * or to generate a new event that is a merge/pipe of other\n * Evts.\n *\n * BE AWARE: Unlike useEffect factoryOrEffect is called\n * on render ( like useMemo's callback ).\n * Remember that you shouldn't update state in a component\n * render tick (in the useMemo for example). If you you need to\n * perform an effect on first render (attaching a stateful evt\n * for example) use registerSideEffect(()=>{ ... })\n *\n * Demo: https://docs.evt.land/react-hooks#useevt\n */\nfunction useEvt(effect, deps) {\n  useEffect(function () {\n    var ctx = lib_1.Evt.newCtx();\n    effect(ctx);\n    return function () {\n      ctx.done();\n    };\n  }, deps);\n}\nexports.useEvt = useEvt;","map":{"version":3,"names":["lib_1","require","React","__importStar","useEffect","useEvt","effect","deps","ctx","Evt","newCtx","done","exports"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\hooks\\useEvt.ts"],"sourcesContent":["import { Evt } from \"../lib\";\nimport type { Ctx } from \"../lib\";\nimport * as React from \"react\";\nconst { useEffect } = React;\n\n\n/**\n * https://docs.evt.land/api/react-hooks\n * \n * Provide a Ctx to attach handlers.\n * You should list in deps all the Evt that are\n * susceptible to change ( Evt passed as props \n * or Evt that are react states ) that you use in the\n * factoryOrEffect callback. \n * As for useEffect you should also list every other\n * value that you use.\n * Whenever any value in deps is changed factoryOrEffect\n * is invoked again with the new Evt and the previous handler\n * get detached.\n * All handler are also detached when the component unmount.\n * \n * factoryOrEffect can be used for attaching handler to event\n * or to generate a new event that is a merge/pipe of other \n * Evts.\n * \n * BE AWARE: Unlike useEffect factoryOrEffect is called \n * on render ( like useMemo's callback ).\n * Remember that you shouldn't update state in a component \n * render tick (in the useMemo for example). If you you need to \n * perform an effect on first render (attaching a stateful evt\n * for example) use registerSideEffect(()=>{ ... })\n * \n * Demo: https://docs.evt.land/react-hooks#useevt\n */\nexport function useEvt(\n    effect: (ctx: Ctx) => void,\n    deps?: React.DependencyList\n): void {\n\n    useEffect(\n        ()=> {\n            const ctx= Evt.newCtx();\n\n            effect(ctx);\n\n            return ()=> { ctx.done(); };\n        },\n        deps\n    );\n\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,KAAA,GAAAC,OAAA;AAEA,IAAAC,KAAA,GAAAC,YAAA,CAAAF,OAAA;AACQ,IAAAG,SAAS,GAAKF,KAAK,CAAAE,SAAV;AAGjB;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA,SAAgBC,MAAMA,CAClBC,MAA0B,EAC1BC,IAA2B;EAG3BH,SAAS,CACL;IACI,IAAMI,GAAG,GAAER,KAAA,CAAAS,GAAG,CAACC,MAAM,EAAE;IAEvBJ,MAAM,CAACE,GAAG,CAAC;IAEX,OAAO;MAAOA,GAAG,CAACG,IAAI,EAAE;IAAE,CAAC;EAC/B,CAAC,EACDJ,IAAI,CACP;AAEL;AAhBAK,OAAA,CAAAP,MAAA,GAAAA,MAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}