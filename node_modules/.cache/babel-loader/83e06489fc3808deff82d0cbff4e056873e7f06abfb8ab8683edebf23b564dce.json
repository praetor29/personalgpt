{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.defaultSpacingConfig = void 0;\nvar breakpoints_1 = require(\"./breakpoints\");\nvar assert_1 = require(\"tsafe/assert\");\nvar defaultSpacingConfig = function (_a) {\n  var factorOrExplicitNumberOfPx = _a.factorOrExplicitNumberOfPx,\n    windowInnerWidth = _a.windowInnerWidth,\n    rootFontSizePx = _a.rootFontSizePx;\n  if (typeof factorOrExplicitNumberOfPx === \"string\") {\n    var match = factorOrExplicitNumberOfPx.match(/^([+-]?([0-9]*[.])?[0-9]+)px$/);\n    (0, assert_1.assert)(match !== null, \"\".concat(factorOrExplicitNumberOfPx, \" don't match \\\\d+px\"));\n    return Number.parseFloat(match[1]);\n  }\n  return rootFontSizePx * function callee(factor) {\n    (0, assert_1.assert)(factor >= 0, \"factor must be positive\");\n    if (!Number.isInteger(factor)) {\n      return (callee(Math.floor(factor)) + callee(Math.floor(factor) + 1)) / 2;\n    }\n    if (factor === 0) {\n      return 0;\n    }\n    if (factor > 6) {\n      return (factor - 5) * callee(6);\n    }\n    if (windowInnerWidth >= breakpoints_1.breakpointsValues.xl) {\n      switch (factor) {\n        case 1:\n          return 0.25;\n        case 2:\n          return 0.5;\n        case 3:\n          return 1;\n        case 4:\n          return 1.5;\n        case 5:\n          return 2;\n        case 6:\n          return 2.5;\n      }\n    }\n    if (windowInnerWidth >= breakpoints_1.breakpointsValues.lg) {\n      switch (factor) {\n        case 1:\n          return 0.25;\n        case 2:\n          return 0.5;\n        case 3:\n          return 1;\n        case 4:\n          return 1;\n        case 5:\n          return 1.5;\n        case 6:\n          return 2;\n      }\n    }\n    switch (factor) {\n      case 1:\n        return 0.25;\n      case 2:\n        return 0.25;\n      case 3:\n        return 0.5;\n      case 4:\n        return 1;\n      case 5:\n        return 1;\n      case 6:\n        return 1.5;\n    }\n    (0, assert_1.assert)(false);\n  }(factorOrExplicitNumberOfPx);\n};\nexports.defaultSpacingConfig = defaultSpacingConfig;","map":{"version":3,"names":["breakpoints_1","require","assert_1","defaultSpacingConfig","_a","factorOrExplicitNumberOfPx","windowInnerWidth","rootFontSizePx","match","assert","concat","Number","parseFloat","callee","factor","isInteger","Math","floor","breakpointsValues","xl","lg","exports"],"sources":["C:\\Users\\prana\\repos\\personalgpt\\.yarn\\__virtual__\\onyxia-ui-virtual-5c2a1ec994\\3\\AppData\\Local\\Yarn\\Berry\\cache\\onyxia-ui-npm-0.47.23-cc0c9aaf2a-10c0.zip\\node_modules\\onyxia-ui\\src\\lib\\spacing.ts"],"sourcesContent":["import { breakpointsValues } from \"./breakpoints\";\nimport { assert } from \"tsafe/assert\";\nexport interface Spacing {\n    (value: number): number;\n    (params: Record<\"topBottom\" | \"rightLeft\", number | string>): string;\n    rightLeft<Kind extends \"padding\" | \"margin\">(\n        kind: Kind,\n        value: number | string,\n    ): Record<`${\"left\" | \"right\"}${Capitalize<Kind>}`, string>;\n    topBottom<Kind extends \"padding\" | \"margin\">(\n        kind: Kind,\n        value: number | string,\n    ): Record<`${\"top\" | \"bottom\"}${Capitalize<Kind>}`, string>;\n}\n\n/** Return number of pixel */\nexport type SpacingConfig = (params: {\n    /** Assert positive integer */\n    factorOrExplicitNumberOfPx: number | `${number}px`;\n    windowInnerWidth: number;\n    rootFontSizePx: number;\n}) => number;\n\nexport const defaultSpacingConfig: SpacingConfig = ({\n    factorOrExplicitNumberOfPx,\n    windowInnerWidth,\n    rootFontSizePx,\n}) => {\n    if (typeof factorOrExplicitNumberOfPx === \"string\") {\n        const match = factorOrExplicitNumberOfPx.match(\n            /^([+-]?([0-9]*[.])?[0-9]+)px$/,\n        );\n\n        assert(\n            match !== null,\n            `${factorOrExplicitNumberOfPx} don't match \\\\d+px`,\n        );\n\n        return Number.parseFloat(match[1]);\n    }\n\n    return (\n        rootFontSizePx *\n        (function callee(factor: number): number {\n            assert(factor >= 0, \"factor must be positive\");\n\n            if (!Number.isInteger(factor)) {\n                return (\n                    (callee(Math.floor(factor)) +\n                        callee(Math.floor(factor) + 1)) /\n                    2\n                );\n            }\n\n            if (factor === 0) {\n                return 0;\n            }\n\n            if (factor > 6) {\n                return (factor - 5) * callee(6);\n            }\n\n            if (windowInnerWidth >= breakpointsValues.xl) {\n                switch (factor) {\n                    case 1:\n                        return 0.25;\n                    case 2:\n                        return 0.5;\n                    case 3:\n                        return 1;\n                    case 4:\n                        return 1.5;\n                    case 5:\n                        return 2;\n                    case 6:\n                        return 2.5;\n                }\n            }\n\n            if (windowInnerWidth >= breakpointsValues.lg) {\n                switch (factor) {\n                    case 1:\n                        return 0.25;\n                    case 2:\n                        return 0.5;\n                    case 3:\n                        return 1;\n                    case 4:\n                        return 1;\n                    case 5:\n                        return 1.5;\n                    case 6:\n                        return 2;\n                }\n            }\n\n            switch (factor) {\n                case 1:\n                    return 0.25;\n                case 2:\n                    return 0.25;\n                case 3:\n                    return 0.5;\n                case 4:\n                    return 1;\n                case 5:\n                    return 1;\n                case 6:\n                    return 1.5;\n            }\n\n            assert(false);\n        })(factorOrExplicitNumberOfPx)\n    );\n};\n"],"mappings":";;;;;;AAAA,IAAAA,aAAA,GAAAC,OAAA;AACA,IAAAC,QAAA,GAAAD,OAAA;AAsBO,IAAME,oBAAoB,GAAkB,SAAAA,CAACC,EAInD;MAHGC,0BAA0B,GAAAD,EAAA,CAAAC,0BAAA;IAC1BC,gBAAgB,GAAAF,EAAA,CAAAE,gBAAA;IAChBC,cAAc,GAAAH,EAAA,CAAAG,cAAA;EAEd,IAAI,OAAOF,0BAA0B,KAAK,QAAQ,EAAE;IAChD,IAAMG,KAAK,GAAGH,0BAA0B,CAACG,KAAK,CAC1C,+BAA+B,CAClC;IAED,IAAAN,QAAA,CAAAO,MAAM,EACFD,KAAK,KAAK,IAAI,EACd,GAAAE,MAAA,CAAGL,0BAA0B,wBAAqB,CACrD;IAED,OAAOM,MAAM,CAACC,UAAU,CAACJ,KAAK,CAAC,CAAC,CAAC,CAAC;;EAGtC,OACID,cAAc,GACb,SAASM,MAAMA,CAACC,MAAc;IAC3B,IAAAZ,QAAA,CAAAO,MAAM,EAACK,MAAM,IAAI,CAAC,EAAE,yBAAyB,CAAC;IAE9C,IAAI,CAACH,MAAM,CAACI,SAAS,CAACD,MAAM,CAAC,EAAE;MAC3B,OACI,CAACD,MAAM,CAACG,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,CAAC,GACvBD,MAAM,CAACG,IAAI,CAACC,KAAK,CAACH,MAAM,CAAC,GAAG,CAAC,CAAC,IAClC,CAAC;;IAIT,IAAIA,MAAM,KAAK,CAAC,EAAE;MACd,OAAO,CAAC;;IAGZ,IAAIA,MAAM,GAAG,CAAC,EAAE;MACZ,OAAO,CAACA,MAAM,GAAG,CAAC,IAAID,MAAM,CAAC,CAAC,CAAC;;IAGnC,IAAIP,gBAAgB,IAAIN,aAAA,CAAAkB,iBAAiB,CAACC,EAAE,EAAE;MAC1C,QAAQL,MAAM;QACV,KAAK,CAAC;UACF,OAAO,IAAI;QACf,KAAK,CAAC;UACF,OAAO,GAAG;QACd,KAAK,CAAC;UACF,OAAO,CAAC;QACZ,KAAK,CAAC;UACF,OAAO,GAAG;QACd,KAAK,CAAC;UACF,OAAO,CAAC;QACZ,KAAK,CAAC;UACF,OAAO,GAAG;;;IAItB,IAAIR,gBAAgB,IAAIN,aAAA,CAAAkB,iBAAiB,CAACE,EAAE,EAAE;MAC1C,QAAQN,MAAM;QACV,KAAK,CAAC;UACF,OAAO,IAAI;QACf,KAAK,CAAC;UACF,OAAO,GAAG;QACd,KAAK,CAAC;UACF,OAAO,CAAC;QACZ,KAAK,CAAC;UACF,OAAO,CAAC;QACZ,KAAK,CAAC;UACF,OAAO,GAAG;QACd,KAAK,CAAC;UACF,OAAO,CAAC;;;IAIpB,QAAQA,MAAM;MACV,KAAK,CAAC;QACF,OAAO,IAAI;MACf,KAAK,CAAC;QACF,OAAO,IAAI;MACf,KAAK,CAAC;QACF,OAAO,GAAG;MACd,KAAK,CAAC;QACF,OAAO,CAAC;MACZ,KAAK,CAAC;QACF,OAAO,CAAC;MACZ,KAAK,CAAC;QACF,OAAO,GAAG;;IAGlB,IAAAZ,QAAA,CAAAO,MAAM,EAAC,KAAK,CAAC;EACjB,CAAC,CAAEJ,0BAA0B,CAAC;AAEtC,CAAC;AA3FYgB,OAAA,CAAAlB,oBAAoB,GAAAA,oBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}