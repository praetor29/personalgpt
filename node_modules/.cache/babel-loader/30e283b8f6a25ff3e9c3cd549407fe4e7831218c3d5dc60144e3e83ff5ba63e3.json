{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createUseGlobalState = exports.injectGlobalStatesInSearchParams = exports.globalStates = void 0;\nvar react_1 = require(\"react\");\nvar useConstCallback_1 = require(\"./useConstCallback\");\nvar overwriteReadonlyProp_1 = require(\"tsafe/lab/overwriteReadonlyProp\");\nvar typeGuard_1 = require(\"tsafe/typeGuard\");\nvar capitalize_1 = require(\"./tools/capitalize\");\nvar memoize0_1 = require(\"./tools/memoize0\");\nvar urlSearchParams_1 = require(\"./tools/urlSearchParams\");\nvar StatefulObservable_1 = require(\"./tools/StatefulObservable\");\nvar _a = function () {\n    var propertyKey = \"__powerhooks_useGlobalState_context\";\n    var peerDepObj = react_1.createContext;\n    var sharedContext = peerDepObj.__powerhooks_useGlobalState_context;\n    if (sharedContext === undefined) {\n      sharedContext = {\n        \"globalStates\": {},\n        \"persistedGlobalStateNames\": new Set()\n      };\n      Object.defineProperty(peerDepObj, propertyKey, {\n        \"configurable\": false,\n        \"enumerable\": false,\n        \"writable\": false,\n        \"value\": sharedContext\n      });\n    }\n    return sharedContext;\n  }(),\n  globalStates = _a.globalStates,\n  persistedGlobalStateNames = _a.persistedGlobalStateNames;\nexports.globalStates = globalStates;\nfunction stringify(obj) {\n  return JSON.stringify([obj]);\n}\nfunction parse(str) {\n  return JSON.parse(str)[0];\n}\nvar prefix = \"powerhooks_useGlobalState_\";\nvar _b = function () {\n    /** Returns the modified url */\n    function injectGlobalStatesInSearchParams(url) {\n      var newUrl = url;\n      Object.keys(globalStates).filter(function (name) {\n        return persistedGlobalStateNames.has(name);\n      }).forEach(function (name) {\n        return newUrl = (0, urlSearchParams_1.addParamToUrl)({\n          \"url\": newUrl,\n          \"name\": \"\".concat(prefix).concat(name),\n          \"value\": stringify(globalStates[name])\n        }).newUrl;\n      });\n      return newUrl;\n    }\n    var getUnparsedStatesFromUrlSearchParams = (0, memoize0_1.memoize0)(function () {\n      var _a = (0, urlSearchParams_1.retrieveAllParamStartingWithPrefixFromUrl)({\n          \"url\": window.location.href,\n          prefix: prefix,\n          \"doLeavePrefixInResults\": false\n        }),\n        newUrl = _a.newUrl,\n        unparsedStates = _a.values;\n      //NOTE: We use a timeout in case there is multiple instances of \n      // powerhooks.\n      setTimeout(function () {\n        (0, urlSearchParams_1.updateSearchBarUrl)(newUrl);\n      }, 0);\n      return {\n        unparsedStates: unparsedStates\n      };\n    });\n    function getStatesFromUrlSearchParams(params) {\n      var name = params.name;\n      var unparsedStates = getUnparsedStatesFromUrlSearchParams().unparsedStates;\n      if (!(name in unparsedStates)) {\n        return {\n          \"wasPresent\": false\n        };\n      }\n      return {\n        \"wasPresent\": true,\n        \"state\": parse(unparsedStates[name])\n      };\n    }\n    return {\n      injectGlobalStatesInSearchParams: injectGlobalStatesInSearchParams,\n      getStatesFromUrlSearchParams: getStatesFromUrlSearchParams\n    };\n  }(),\n  injectGlobalStatesInSearchParams = _b.injectGlobalStatesInSearchParams,\n  getStatesFromUrlSearchParams = _b.getStatesFromUrlSearchParams;\nexports.injectGlobalStatesInSearchParams = injectGlobalStatesInSearchParams;\n/**\n *\n * Assert: If localStorageKey is not disabled, T must be\n * serializable with JSON.stringify.\n *\n * const { useFoo } = createUseGlobalState2({\n *     \"getDefaultState\": ()=> 33,\n *     \"name\": \"foo\"\n * });\n *\n * const { foo, setFoo  } = useFoo();\n *\n * By default persistance is enabled using localStorage.\n *\n */\nfunction createUseGlobalState(params) {\n  var _a;\n  var name = params.name,\n    initialState = params.initialState,\n    doPersistAcrossReloads = params.doPersistAcrossReloads;\n  if (doPersistAcrossReloads) {\n    persistedGlobalStateNames.add(name);\n  }\n  //NOTE: We want to clean the url asap so we don't put it in the \n  // evt getter... \n  var urlSearchParam = getStatesFromUrlSearchParams({\n    name: name\n  });\n  var get$xyz = (0, memoize0_1.memoize0)(function () {\n    var localStorageKey = \"\".concat(prefix).concat(name);\n    var storeStateInPersistentStorage = !doPersistAcrossReloads ? undefined : function (state) {\n      return localStorage.setItem(localStorageKey, stringify(state));\n    };\n    var $xyz = (0, StatefulObservable_1.createStatefulObservable)(function () {\n      var initialValue = function () {\n        if (urlSearchParam.wasPresent) {\n          var state = urlSearchParam.state;\n          storeStateInPersistentStorage === null || storeStateInPersistentStorage === void 0 ? void 0 : storeStateInPersistentStorage(state);\n          return state;\n        }\n        if (doPersistAcrossReloads) {\n          var serializedState = localStorage.getItem(localStorageKey);\n          if (serializedState !== null) {\n            return parse(serializedState);\n          }\n        }\n        return (0, typeGuard_1.typeGuard)(initialState, typeof initialState === \"function\") ? initialState() : initialState;\n      }();\n      return function () {\n        return initialValue;\n      };\n    }());\n    if (storeStateInPersistentStorage !== undefined) {\n      $xyz.subscribe(storeStateInPersistentStorage);\n    }\n    return $xyz;\n  });\n  Object.defineProperty(globalStates, name, {\n    \"enumerable\": true,\n    \"get\": function () {\n      return get$xyz().current;\n    }\n  });\n  function useXyz() {\n    var _a;\n    var $xyz = get$xyz();\n    (0, StatefulObservable_1.useRerenderOnChange)($xyz);\n    return _a = {}, _a[name] = $xyz.current, _a[\"set\".concat((0, capitalize_1.capitalize)(name))] = (0, useConstCallback_1.useConstCallback)(function (setStateAction) {\n      return $xyz.current = (0, typeGuard_1.typeGuard)(setStateAction, typeof setStateAction === \"function\") ? setStateAction($xyz.current) : setStateAction;\n    }), _a;\n  }\n  (0, overwriteReadonlyProp_1.overwriteReadonlyProp)(useXyz, \"name\", \"use\".concat((0, capitalize_1.capitalize)(name)));\n  return Object.defineProperty((_a = {}, _a[useXyz.name] = useXyz, _a), \"$\".concat(name), {\n    \"enumerable\": true,\n    \"get\": function () {\n      return get$xyz();\n    }\n  });\n}\nexports.createUseGlobalState = createUseGlobalState;","map":{"version":3,"names":["react_1","require","useConstCallback_1","overwriteReadonlyProp_1","typeGuard_1","capitalize_1","memoize0_1","urlSearchParams_1","StatefulObservable_1","_a","propertyKey","peerDepObj","createContext","sharedContext","__powerhooks_useGlobalState_context","undefined","Set","Object","defineProperty","globalStates","persistedGlobalStateNames","exports","stringify","obj","JSON","parse","str","prefix","_b","injectGlobalStatesInSearchParams","url","newUrl","keys","filter","name","has","forEach","addParamToUrl","concat","getUnparsedStatesFromUrlSearchParams","memoize0","retrieveAllParamStartingWithPrefixFromUrl","window","location","href","unparsedStates","values","setTimeout","updateSearchBarUrl","getStatesFromUrlSearchParams","params","createUseGlobalState","initialState","doPersistAcrossReloads","add","urlSearchParam","get$xyz","localStorageKey","storeStateInPersistentStorage","state","localStorage","setItem","$xyz","createStatefulObservable","initialValue","wasPresent","serializedState","getItem","typeGuard","subscribe","get","current","useXyz","useRerenderOnChange","capitalize","useConstCallback","setStateAction","overwriteReadonlyProp"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\powerhooks-npm-1.0.5-bfde938522-10c0.zip\\node_modules\\powerhooks\\src\\useGlobalState.ts"],"sourcesContent":["\nimport { createContext } from \"react\";\nimport { useConstCallback } from \"./useConstCallback\";\nimport { overwriteReadonlyProp } from \"tsafe/lab/overwriteReadonlyProp\";\nimport type { UseNamedStateReturnType } from \"./useNamedState\";\nimport { typeGuard } from \"tsafe/typeGuard\";\nimport { capitalize } from \"./tools/capitalize\";\nimport { memoize0 } from \"./tools/memoize0\";\nimport { addParamToUrl, retrieveAllParamStartingWithPrefixFromUrl, updateSearchBarUrl } from \"./tools/urlSearchParams\";\nimport { createStatefulObservable, useRerenderOnChange } from \"./tools/StatefulObservable\";\nimport type { StatefulObservable } from \"./tools/StatefulObservable\";\n\nexport type { StatefulObservable };\n\nconst {\n    globalStates,\n    persistedGlobalStateNames\n} = (() => {\n\n    type SharedContext = {\n        globalStates: Readonly<Record<string, unknown>>;\n        persistedGlobalStateNames: Set<string>;\n    };\n\n    const propertyKey = \"__powerhooks_useGlobalState_context\";\n\n    const peerDepObj: Record<typeof propertyKey, SharedContext | undefined> = createContext as any;\n\n    let sharedContext = peerDepObj.__powerhooks_useGlobalState_context;\n\n    if (sharedContext === undefined) {\n\n        sharedContext = {\n            \"globalStates\": {},\n            \"persistedGlobalStateNames\": new Set<string>()\n        };\n\n        Object.defineProperty(peerDepObj, propertyKey, {\n            \"configurable\": false,\n            \"enumerable\": false,\n            \"writable\": false,\n            \"value\": sharedContext\n        });\n    }\n\n    return sharedContext;\n\n})();\n\nexport { globalStates };\n\n\nfunction stringify(obj: unknown): string {\n    return JSON.stringify([obj]);\n}\n\nfunction parse<T>(str: string): T {\n    return JSON.parse(str)[0];\n}\n\nconst prefix = \"powerhooks_useGlobalState_\";\n\nconst { injectGlobalStatesInSearchParams, getStatesFromUrlSearchParams } = (() => {\n\n    /** Returns the modified url */\n    function injectGlobalStatesInSearchParams(url: string): string {\n\n        let newUrl = url;\n\n        Object.keys(globalStates)\n            .filter(name => persistedGlobalStateNames.has(name))\n            .forEach(name =>\n                newUrl =\n                addParamToUrl({\n                    \"url\": newUrl,\n                    \"name\": `${prefix}${name}`,\n                    \"value\": stringify(globalStates[name])\n                })\n                    .newUrl\n            );\n\n        return newUrl;\n\n    }\n\n    const getUnparsedStatesFromUrlSearchParams = memoize0(() => {\n\n        const {\n            newUrl,\n            values: unparsedStates\n        } = retrieveAllParamStartingWithPrefixFromUrl({\n            \"url\": window.location.href,\n            prefix,\n            \"doLeavePrefixInResults\": false\n        });\n\n        //NOTE: We use a timeout in case there is multiple instances of \n        // powerhooks.\n        setTimeout(()=> {\n            updateSearchBarUrl(newUrl);\n        },0);\n\n        return { unparsedStates };\n\n    })\n\n    function getStatesFromUrlSearchParams<T>(\n        params: {\n            name: string;\n        }\n    ): { wasPresent: false; } | { wasPresent: true; state: T; } {\n\n        const { name } = params;\n\n        const { unparsedStates } = getUnparsedStatesFromUrlSearchParams();\n\n        if (!(name in unparsedStates)) {\n            return { \"wasPresent\": false };\n        }\n\n        return {\n            \"wasPresent\": true,\n            \"state\": parse(unparsedStates[name])\n        };\n\n    }\n\n    return {\n        injectGlobalStatesInSearchParams,\n        getStatesFromUrlSearchParams\n    };\n\n})();\n\nexport { injectGlobalStatesInSearchParams };\n\n\n\n/**\n * \n * Assert: If localStorageKey is not disabled, T must be \n * serializable with JSON.stringify.\n * \n * const { useFoo } = createUseGlobalState2({\n *     \"getDefaultState\": ()=> 33,\n *     \"name\": \"foo\"\n * });\n *\n * const { foo, setFoo  } = useFoo();\n * \n * By default persistance is enabled using localStorage.\n * \n */\nexport function createUseGlobalState<T, Name extends string>(\n    params: {\n        name: Name,\n        /** If function called only if not in local storage */\n        initialState: T | (() => T),\n        doPersistAcrossReloads: boolean;\n    }\n): Record<\n    `use${Capitalize<Name>}`,\n    () => UseNamedStateReturnType<T, Name>\n> & Record<\n    `$${Name}`,\n    StatefulObservable<T>\n> {\n\n    const { name, initialState, doPersistAcrossReloads } = params;\n\n    if (doPersistAcrossReloads) {\n\n        persistedGlobalStateNames.add(name);\n\n    }\n\n    //NOTE: We want to clean the url asap so we don't put it in the \n    // evt getter... \n    const urlSearchParam = getStatesFromUrlSearchParams<T>({ name });\n\n    const get$xyz = memoize0(() => {\n\n        const localStorageKey = `${prefix}${name}`;\n\n        const storeStateInPersistentStorage = !doPersistAcrossReloads ? undefined : (state: T) => localStorage.setItem(localStorageKey, stringify(state));\n\n        const $xyz= createStatefulObservable<T>((()=>{\n\n            const initialValue = (() => {\n\n                if (urlSearchParam.wasPresent) {\n\n                    const { state } = urlSearchParam;\n\n                    storeStateInPersistentStorage?.(state);\n\n                    return state;\n\n                }\n\n                if (doPersistAcrossReloads) {\n\n                    const serializedState = localStorage.getItem(localStorageKey);\n\n                    if (serializedState !== null) {\n\n                        return parse<T>(serializedState);\n\n                    }\n\n                }\n\n                return typeGuard<() => T>(initialState, typeof initialState === \"function\") ?\n                    initialState() :\n                    initialState;\n\n            })();\n\n            return ()=> initialValue;\n\n        })());\n\n\n        if (storeStateInPersistentStorage !== undefined) {\n\n            $xyz.subscribe(storeStateInPersistentStorage);\n\n        }\n\n        return $xyz;\n\n    });\n\n\n    Object.defineProperty(\n        globalStates,\n        name,\n        {\n            \"enumerable\": true,\n            \"get\": () => get$xyz().current\n        }\n    );\n\n    function useXyz() {\n\n        const $xyz = get$xyz();\n\n        useRerenderOnChange($xyz);\n\n        return {\n            [name]: $xyz.current,\n            [`set${capitalize(name)}`]:\n                useConstCallback((setStateAction: T | ((prevState: T) => T)) =>\n                    $xyz.current =\n                    typeGuard<(prevState: T) => T>(setStateAction, typeof setStateAction === \"function\") ?\n                        setStateAction($xyz.current) :\n                        setStateAction\n                )\n        } as any;\n\n    }\n\n    overwriteReadonlyProp(useXyz as any, \"name\", `use${capitalize(name)}`);\n\n    return Object.defineProperty(\n        { [useXyz.name]: useXyz } as any,\n        `$${name}`,\n        {\n            \"enumerable\": true,\n            \"get\": () => get$xyz()\n        }\n    );\n\n}\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}