{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.allEqualsToFactory = exports.allEqualsTo = exports.arrAllEqualsTo = void 0;\nvar reduceify_1 = require(\"./reduceify\");\nvar every_1 = require(\"./every\");\nfunction arrAllEqualsTo(arr, to, areEquals) {\n  if (areEquals === void 0) {\n    areEquals = function (e, to) {\n      return e === to;\n    };\n  }\n  return arr.reduce.apply(arr, __spreadArray([], __read((0, every_1.every)(function (e) {\n    return areEquals(e, to);\n  })), false));\n}\nexports.arrAllEqualsTo = arrAllEqualsTo;\n;\nfunction allEqualsTo(to, areEquals) {\n  return (0, reduceify_1.toReduceArguments)(arrAllEqualsTo, to, areEquals);\n}\nexports.allEqualsTo = allEqualsTo;\nfunction allEqualsToFactory(_a) {\n  var areEquals = _a.areEquals;\n  return {\n    \"allEqualsTo\": function (to) {\n      return allEqualsTo(to, areEquals);\n    }\n  };\n}\nexports.allEqualsToFactory = allEqualsToFactory;","map":{"version":3,"names":["reduceify_1","require","every_1","arrAllEqualsTo","arr","to","areEquals","e","reduce","apply","__spreadArray","__read","every","exports","allEqualsTo","toReduceArguments","allEqualsToFactory","_a"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\tools\\reducers\\allEqualsTo.ts"],"sourcesContent":["\nimport { toReduceArguments, ReduceArguments } from \"./reduceify\";\nimport { every } from \"./every\";\n\n\nexport function arrAllEqualsTo<ArrOf>(\n    arr: readonly ArrOf[],\n    to: ArrOf,\n    areEquals: (e: ArrOf, to: ArrOf) => boolean = (e, to) => e === to\n): boolean {\n    return arr.reduce(...every<ArrOf>(e => areEquals(e, to)));\n};\n\nexport function allEqualsTo<ArrOf>(\n    to: ArrOf,\n    areEquals?: (e: ArrOf, to: ArrOf) => boolean\n): ReduceArguments<ArrOf, boolean> {\n    return toReduceArguments(arrAllEqualsTo, to, areEquals);\n}\n\nexport function allEqualsToFactory({ areEquals }: { areEquals: <T>(e: T, to: T) => boolean }) {\n    return { \"allEqualsTo\": <ArrOf>(to: ArrOf) => allEqualsTo<ArrOf>(to, areEquals) };\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,IAAAA,WAAA,GAAAC,OAAA;AACA,IAAAC,OAAA,GAAAD,OAAA;AAGA,SAAgBE,cAAcA,CAC1BC,GAAqB,EACrBC,EAAS,EACTC,SAAiE;EAAjE,IAAAA,SAAA;IAAAA,SAAA,YAAAA,CAA+CC,CAAC,EAAEF,EAAE;MAAK,OAAAE,CAAC,KAAKF,EAAE;IAAR,CAAQ;EAAA;EAEjE,OAAOD,GAAG,CAACI,MAAM,CAAAC,KAAA,CAAVL,GAAG,EAAAM,aAAA,KAAAC,MAAA,CAAW,IAAAT,OAAA,CAAAU,KAAK,EAAQ,UAAAL,CAAC;IAAI,OAAAD,SAAS,CAACC,CAAC,EAAEF,EAAE,CAAC;EAAhB,CAAgB,CAAC;AAC5D;AANAQ,OAAA,CAAAV,cAAA,GAAAA,cAAA;AAMC;AAED,SAAgBW,WAAWA,CACvBT,EAAS,EACTC,SAA4C;EAE5C,OAAO,IAAAN,WAAA,CAAAe,iBAAiB,EAACZ,cAAc,EAAEE,EAAE,EAAEC,SAAS,CAAC;AAC3D;AALAO,OAAA,CAAAC,WAAA,GAAAA,WAAA;AAOA,SAAgBE,kBAAkBA,CAACC,EAAyD;MAAvDX,SAAS,GAAAW,EAAA,CAAAX,SAAA;EAC1C,OAAO;IAAE,aAAa,EAAE,SAAAQ,CAAQT,EAAS;MAAK,OAAAS,WAAW,CAAQT,EAAE,EAAEC,SAAS,CAAC;IAAjC;EAAiC,CAAE;AACrF;AAFAO,OAAA,CAAAG,kBAAA,GAAAA,kBAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}