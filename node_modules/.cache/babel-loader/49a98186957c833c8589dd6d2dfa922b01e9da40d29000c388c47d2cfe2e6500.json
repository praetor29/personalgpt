{"ast":null,"code":"\"use strict\";\n\nvar callable = require(\"es5-ext/object/valid-callable\"),\n  forEach = require(\"es5-ext/object/for-each\"),\n  extensions = require(\"./lib/registered-extensions\"),\n  configure = require(\"./lib/configure-map\"),\n  resolveLength = require(\"./lib/resolve-length\");\nmodule.exports = function self(fn /*, options */) {\n  var options, length, conf;\n  callable(fn);\n  options = Object(arguments[1]);\n  if (options.async && options.promise) {\n    throw new Error(\"Options 'async' and 'promise' cannot be used together\");\n  }\n\n  // Do not memoize already memoized function\n  if (hasOwnProperty.call(fn, \"__memoized__\") && !options.force) return fn;\n\n  // Resolve length;\n  length = resolveLength(options.length, fn.length, options.async && extensions.async);\n\n  // Configure cache map\n  conf = configure(fn, length, options);\n\n  // Bind eventual extensions\n  forEach(extensions, function (extFn, name) {\n    if (options[name]) extFn(options[name], conf, options);\n  });\n  if (self.__profiler__) self.__profiler__(conf);\n  conf.updateEnv();\n  return conf.memoized;\n};","map":{"version":3,"names":["callable","require","forEach","extensions","configure","resolveLength","module","exports","self","fn","options","length","conf","Object","arguments","async","promise","Error","hasOwnProperty","call","force","extFn","name","__profiler__","updateEnv","memoized"],"sources":["C:/Users/prana/AppData/Local/Yarn/Berry/cache/memoizee-npm-0.4.15-69d374fc14-10c0.zip/node_modules/memoizee/plain.js"],"sourcesContent":["\"use strict\";\n\nvar callable      = require(\"es5-ext/object/valid-callable\")\n  , forEach       = require(\"es5-ext/object/for-each\")\n  , extensions    = require(\"./lib/registered-extensions\")\n  , configure     = require(\"./lib/configure-map\")\n  , resolveLength = require(\"./lib/resolve-length\");\n\nmodule.exports = function self(fn /*, options */) {\n\tvar options, length, conf;\n\n\tcallable(fn);\n\toptions = Object(arguments[1]);\n\n\tif (options.async && options.promise) {\n\t\tthrow new Error(\"Options 'async' and 'promise' cannot be used together\");\n\t}\n\n\t// Do not memoize already memoized function\n\tif (hasOwnProperty.call(fn, \"__memoized__\") && !options.force) return fn;\n\n\t// Resolve length;\n\tlength = resolveLength(options.length, fn.length, options.async && extensions.async);\n\n\t// Configure cache map\n\tconf = configure(fn, length, options);\n\n\t// Bind eventual extensions\n\tforEach(extensions, function (extFn, name) {\n\t\tif (options[name]) extFn(options[name], conf, options);\n\t});\n\n\tif (self.__profiler__) self.__profiler__(conf);\n\n\tconf.updateEnv();\n\treturn conf.memoized;\n};\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,QAAQ,GAAQC,OAAO,CAAC,+BAA+B,CAAC;EACxDC,OAAO,GAASD,OAAO,CAAC,yBAAyB,CAAC;EAClDE,UAAU,GAAMF,OAAO,CAAC,6BAA6B,CAAC;EACtDG,SAAS,GAAOH,OAAO,CAAC,qBAAqB,CAAC;EAC9CI,aAAa,GAAGJ,OAAO,CAAC,sBAAsB,CAAC;AAEnDK,MAAM,CAACC,OAAO,GAAG,SAASC,IAAIA,CAACC,EAAE,CAAC,gBAAgB;EACjD,IAAIC,OAAO,EAAEC,MAAM,EAAEC,IAAI;EAEzBZ,QAAQ,CAACS,EAAE,CAAC;EACZC,OAAO,GAAGG,MAAM,CAACC,SAAS,CAAC,CAAC,CAAC,CAAC;EAE9B,IAAIJ,OAAO,CAACK,KAAK,IAAIL,OAAO,CAACM,OAAO,EAAE;IACrC,MAAM,IAAIC,KAAK,CAAC,uDAAuD,CAAC;EACzE;;EAEA;EACA,IAAIC,cAAc,CAACC,IAAI,CAACV,EAAE,EAAE,cAAc,CAAC,IAAI,CAACC,OAAO,CAACU,KAAK,EAAE,OAAOX,EAAE;;EAExE;EACAE,MAAM,GAAGN,aAAa,CAACK,OAAO,CAACC,MAAM,EAAEF,EAAE,CAACE,MAAM,EAAED,OAAO,CAACK,KAAK,IAAIZ,UAAU,CAACY,KAAK,CAAC;;EAEpF;EACAH,IAAI,GAAGR,SAAS,CAACK,EAAE,EAAEE,MAAM,EAAED,OAAO,CAAC;;EAErC;EACAR,OAAO,CAACC,UAAU,EAAE,UAAUkB,KAAK,EAAEC,IAAI,EAAE;IAC1C,IAAIZ,OAAO,CAACY,IAAI,CAAC,EAAED,KAAK,CAACX,OAAO,CAACY,IAAI,CAAC,EAAEV,IAAI,EAAEF,OAAO,CAAC;EACvD,CAAC,CAAC;EAEF,IAAIF,IAAI,CAACe,YAAY,EAAEf,IAAI,CAACe,YAAY,CAACX,IAAI,CAAC;EAE9CA,IAAI,CAACY,SAAS,CAAC,CAAC;EAChB,OAAOZ,IAAI,CAACa,QAAQ;AACrB,CAAC"},"metadata":{},"sourceType":"script","externalDependencies":[]}