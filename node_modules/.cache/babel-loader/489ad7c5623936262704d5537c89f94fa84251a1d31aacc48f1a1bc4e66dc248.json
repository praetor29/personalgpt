{"ast":null,"code":"\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n    r,\n    ar = [],\n    e;\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n  return ar;\n};\nvar __spreadArray = this && this.__spreadArray || function (to, from, pack) {\n  if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n    if (ar || !(i in from)) {\n      if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n      ar[i] = from[i];\n    }\n  }\n  return to.concat(ar || Array.prototype.slice.call(from));\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.distinct = void 0;\nvar compose_1 = require(\"../lib/util/compose\");\nvar distinct = function (keySelector, ctxFlush) {\n  var _a;\n  return (0, compose_1.compose)(function (data) {\n    var _a, _b;\n    return [{\n      data: data,\n      \"selectedKey\": (_a = keySelector === null || keySelector === void 0 ? void 0 : keySelector(data)) !== null && _a !== void 0 ? _a : data,\n      \"currentFlushCount\": (_b = ctxFlush === null || ctxFlush === void 0 ? void 0 : ctxFlush.evtDoneOrAborted.postCount) !== null && _b !== void 0 ? _b : 0\n    }];\n  }, [function (_a, _b) {\n    var data = _a.data,\n      selectedKey = _a.selectedKey,\n      currentFlushCount = _a.currentFlushCount;\n    var alreadyPostedData = _b.alreadyPostedData,\n      previousFlushCount = _b.previousFlushCount;\n    return [{\n      \"boxedData\": currentFlushCount !== previousFlushCount || !alreadyPostedData.has(selectedKey) ? [data] : null,\n      \"alreadyPostedData\": new Set(__spreadArray(__spreadArray([], __read(currentFlushCount !== previousFlushCount ? [] : Array.from(alreadyPostedData)), false), [selectedKey], false)),\n      \"previousFlushCount\": currentFlushCount\n    }];\n  }, {\n    \"boxedData\": null,\n    \"alreadyPostedData\": new Set(),\n    \"previousFlushCount\": (_a = ctxFlush === null || ctxFlush === void 0 ? void 0 : ctxFlush.evtDoneOrAborted.postCount) !== null && _a !== void 0 ? _a : 0\n  }], function (_a) {\n    var boxedData = _a.boxedData;\n    return boxedData;\n  });\n};\nexports.distinct = distinct;","map":{"version":3,"names":["compose_1","require","distinct","keySelector","ctxFlush","compose","data","_a","_b","evtDoneOrAborted","postCount","selectedKey","currentFlushCount","alreadyPostedData","previousFlushCount","has","Set","__spreadArray","__read","Array","from","boxedData","exports"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\operators\\distinct.ts"],"sourcesContent":["import { compose } from \"../lib/util/compose\";\n\ntype CtxLike = { evtDoneOrAborted: { postCount: number; }  };\n\nexport const distinct = <T>(\n    keySelector?: ((value: T) => any) | undefined,\n    ctxFlush?: CtxLike\n) => compose<\n    T,\n    {\n        data: T,\n        selectedKey: any,\n        currentFlushCount: number;\n    },\n    {\n        boxedData: [T] | null;\n        alreadyPostedData: Set<any>;\n        previousFlushCount: number\n    },\n    T\n>(\n    data => [{\n        data,\n        \"selectedKey\": keySelector?.(data) ?? data,\n        \"currentFlushCount\": ctxFlush?.evtDoneOrAborted.postCount ?? 0\n    }],\n    [\n        ({ data, selectedKey, currentFlushCount }, { alreadyPostedData, previousFlushCount }) => [{\n            \"boxedData\": (\n                currentFlushCount !== previousFlushCount ||\n                !alreadyPostedData.has(selectedKey)\n            ) ? [data] : null,\n            \"alreadyPostedData\": new Set([\n                ...(\n                    currentFlushCount !== previousFlushCount ?\n                        [] : Array.from(alreadyPostedData)\n                ),\n                selectedKey\n            ]),\n            \"previousFlushCount\": currentFlushCount\n        }],\n        {\n            \"boxedData\": null,\n            \"alreadyPostedData\": new Set(),\n            \"previousFlushCount\": ctxFlush?.evtDoneOrAborted.postCount ?? 0\n        }\n    ],\n    ({ boxedData }) => boxedData\n);\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAAA,SAAA,GAAAC,OAAA;AAIO,IAAMC,QAAQ,GAAG,SAAAA,CACpBC,WAA6C,EAC7CC,QAAkB;;EACjB,WAAAJ,SAAA,CAAAK,OAAO,EAcR,UAAAC,IAAI;;IAAI,QAAC;MACLA,IAAI,EAAAA,IAAA;MACJ,aAAa,EAAE,CAAAC,EAAA,GAAAJ,WAAW,aAAXA,WAAW,uBAAXA,WAAW,CAAGG,IAAI,CAAC,cAAAC,EAAA,cAAAA,EAAA,GAAID,IAAI;MAC1C,mBAAmB,EAAE,CAAAE,EAAA,GAAAJ,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,gBAAgB,CAACC,SAAS,cAAAF,EAAA,cAAAA,EAAA,GAAI;KAChE,CAAC;GAAA,EACF,CACI,UAACD,EAAwC,EAAEC,EAAyC;QAAjFF,IAAI,GAAAC,EAAA,CAAAD,IAAA;MAAEK,WAAW,GAAAJ,EAAA,CAAAI,WAAA;MAAEC,iBAAiB,GAAAL,EAAA,CAAAK,iBAAA;QAAMC,iBAAiB,GAAAL,EAAA,CAAAK,iBAAA;MAAEC,kBAAkB,GAAAN,EAAA,CAAAM,kBAAA;IAAO,QAAC;MACtF,WAAW,EACPF,iBAAiB,KAAKE,kBAAkB,IACxC,CAACD,iBAAiB,CAACE,GAAG,CAACJ,WAAW,CAAC,GACnC,CAACL,IAAI,CAAC,GAAG,IAAI;MACjB,mBAAmB,EAAE,IAAIU,GAAG,CAAAC,aAAA,CAAAA,aAAA,KAAAC,MAAA,CAEpBN,iBAAiB,KAAKE,kBAAkB,GACpC,EAAE,GAAGK,KAAK,CAACC,IAAI,CAACP,iBAAiB,CACxC,YACDF,WAAW,C,SACb;MACF,oBAAoB,EAAEC;KACzB,CAAC;EAbuF,CAavF,EACF;IACI,WAAW,EAAE,IAAI;IACjB,mBAAmB,EAAE,IAAII,GAAG,EAAE;IAC9B,oBAAoB,EAAE,CAAAT,EAAA,GAAAH,QAAQ,aAARA,QAAQ,uBAARA,QAAQ,CAAEK,gBAAgB,CAACC,SAAS,cAAAH,EAAA,cAAAA,EAAA,GAAI;GACjE,CACJ,EACD,UAACA,EAAa;QAAXc,SAAS,GAAAd,EAAA,CAAAc,SAAA;IAAO,OAAAA,SAAS;EAAT,CAAS,CAC/B;CAAA;AA5CYC,OAAA,CAAApB,QAAQ,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}