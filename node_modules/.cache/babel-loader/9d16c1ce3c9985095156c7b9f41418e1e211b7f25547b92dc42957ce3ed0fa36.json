{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.asyncPipe = void 0;\nvar importProxy_1 = require(\"./importProxy\");\n/**\n * NOTE: Workaround until v2.0 where .pipe() will support async operators\n * Usage example: https://stackblitz.com/edit/evt-async-op?file=index.ts\n *\n * When the argument is a StatefulEvt:\n * If, wile asyncOp was running, the state of the source evt\n * have changed then the result will be discarded.\n *\n * If the asyncOp complete synchronously (meaning it does not return\n * a promise) then the result is synchronously transformed. (As with .pipe() )\n *\n * More usage example in src/test/test95.ts\n */\nfunction asyncPipe(evt, asyncOp) {\n  var _this_1 = this;\n  var out = \"state\" in evt ? importProxy_1.importProxy.Evt.create(undefined) : importProxy_1.importProxy.Evt.create();\n  var currentCallCount = 0;\n  evt.attach(function (data) {\n    return __awaiter(_this_1, void 0, void 0, function () {\n      var thisCallCount, prOpResult, opResult;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            currentCallCount++;\n            thisCallCount = currentCallCount;\n            prOpResult = asyncOp(data);\n            if (!(prOpResult !== null && \"then\" in prOpResult)) return [3 /*break*/, 2];\n            return [4 /*yield*/, prOpResult];\n          case 1:\n            opResult = _a.sent();\n            if (\"state\" in evt && thisCallCount !== currentCallCount) {\n              return [2 /*return*/];\n            }\n\n            return [3 /*break*/, 3];\n          case 2:\n            opResult = prOpResult;\n            _a.label = 3;\n          case 3:\n            if (!opResult) {\n              return [2 /*return*/];\n            }\n\n            out.post(opResult[0]);\n            return [2 /*return*/];\n        }\n      });\n    });\n  });\n\n  return out;\n}\nexports.asyncPipe = asyncPipe;","map":{"version":3,"names":["importProxy_1","require","asyncPipe","evt","asyncOp","_this_1","out","importProxy","Evt","create","undefined","currentCallCount","attach","data","__awaiter","thisCallCount","prOpResult","opResult","_a","sent","post","exports"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\evt-npm-2.5.3-c2ac0365d2-10c0.zip\\node_modules\\evt\\src\\lib\\Evt.asyncPipe.ts"],"sourcesContent":["\nimport type { Evt } from \"./Evt\";\nimport type { StatefulEvt, UnpackEvt, NonPostableEvtLike, StatefulReadonlyEvtLike } from \"./types\";\nimport type { PromiseOrNot } from \"tsafe/lab/PromiseOrNot\";\nimport { importProxy } from \"./importProxy\";\n\n\n\n/** \n * NOTE: Workaround until v2.0 where .pipe() will support async operators \n * Usage example: https://stackblitz.com/edit/evt-async-op?file=index.ts \n * \n * When the argument is a StatefulEvt:\n * If, wile asyncOp was running, the state of the source evt\n * have changed then the result will be discarded.\n * \n * If the asyncOp complete synchronously (meaning it does not return\n * a promise) then the result is synchronously transformed. (As with .pipe() )\n * \n * More usage example in src/test/test95.ts\n */\nexport function asyncPipe<E extends NonPostableEvtLike<any>, U>(\n    evt: E,\n    asyncOp: (data: UnpackEvt<E>) => PromiseOrNot<[U] | null>\n): \n    E extends StatefulReadonlyEvtLike<any> ? StatefulEvt<U | undefined> : Evt<U> \n{\n\n    const out = \"state\" in evt ?\n        importProxy.Evt.create<UnpackEvt<E> | undefined>(undefined) :\n        importProxy.Evt.create<UnpackEvt<E>>();\n\n    let currentCallCount = 0;\n\n    evt.attach(async (data: UnpackEvt<E>) => {\n\n        currentCallCount++;\n\n        const thisCallCount = currentCallCount;\n\n        const prOpResult = asyncOp(data);\n\n        let opResult: [U] | null;\n\n        if (\n            prOpResult !== null &&\n            \"then\" in prOpResult\n        ) {\n\n            opResult = await prOpResult;\n\n            if (\n                \"state\" in evt &&\n                thisCallCount !== currentCallCount\n            ) {\n                return;\n            }\n\n        } else {\n\n            opResult = prOpResult;\n\n        }\n\n        if (!opResult) {\n\n            return;\n        }\n\n        out.post(opResult[0] as any);\n\n    });\n\n    return out as any;\n\n}\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIA,IAAAA,aAAA,GAAAC,OAAA;AAIA;;;;;;;;;;;;;AAaA,SAAgBC,SAASA,CACrBC,GAAM,EACNC,OAAyD;EAF7D,IAAAC,OAAA;EAOI,IAAMC,GAAG,GAAG,OAAO,IAAIH,GAAG,GACtBH,aAAA,CAAAO,WAAW,CAACC,GAAG,CAACC,MAAM,CAA2BC,SAAS,CAAC,GAC3DV,aAAA,CAAAO,WAAW,CAACC,GAAG,CAACC,MAAM,EAAgB;EAE1C,IAAIE,gBAAgB,GAAG,CAAC;EAExBR,GAAG,CAACS,MAAM,CAAC,UAAOC,IAAkB;IAAA,OAAAC,SAAA,CAAAT,OAAA;;;;;YAEhCM,gBAAgB,EAAE;YAEZI,aAAa,GAAGJ,gBAAgB;YAEhCK,UAAU,GAAGZ,OAAO,CAACS,IAAI,CAAC;kBAK5BG,UAAU,KAAK,IAAI,IACnB,MAAM,IAAIA,UAAU,GADpB;YAIW,qBAAMA,UAAU;;YAA3BC,QAAQ,GAAGC,EAAA,CAAAC,IAAA,EAAgB;YAE3B,IACI,OAAO,IAAIhB,GAAG,IACdY,aAAa,KAAKJ,gBAAgB,EACpC;cACE;;;;;YAKJM,QAAQ,GAAGD,UAAU;;;YAIzB,IAAI,CAACC,QAAQ,EAAE;cAEX;;;YAGJX,GAAG,CAACc,IAAI,CAACH,QAAQ,CAAC,CAAC,CAAQ,CAAC;;;;;GAE/B,CAAC;;EAEF,OAAOX,GAAU;AAErB;AAtDAe,OAAA,CAAAnB,SAAA,GAAAA,SAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}