{"ast":null,"code":"import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\nvar progressTarget = 1000;\nvar Animate = /** @class */function (_super) {\n  __extends(Animate, _super);\n  function Animate() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n    /**\n     * A mutable object that tracks the target viewport box\n     * for the current animation frame.\n     */\n    _this.frameTarget = axisBox();\n    /**\n     * The current animation target, we use this to check whether to start\n     * a new animation or continue the existing one.\n     */\n    _this.currentAnimationTarget = axisBox();\n    /**\n     * Track whether we're animating this axis.\n     */\n    _this.isAnimating = {\n      x: false,\n      y: false\n    };\n    _this.stopAxisAnimation = {\n      x: undefined,\n      y: undefined\n    };\n    _this.isAnimatingTree = false;\n    _this.animate = function (target, origin, _a) {\n      if (_a === void 0) {\n        _a = {};\n      }\n      var originBox = _a.originBox,\n        targetBox = _a.targetBox,\n        visibilityAction = _a.visibilityAction,\n        shouldStackAnimate = _a.shouldStackAnimate,\n        onComplete = _a.onComplete,\n        prevParent = _a.prevParent,\n        config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n      var _b = _this.props,\n        visualElement = _b.visualElement,\n        layout = _b.layout;\n      /**\n       * Early return if we've been instructed not to animate this render.\n       */\n      if (shouldStackAnimate === false) {\n        _this.isAnimatingTree = false;\n        return _this.safeToRemove();\n      }\n      /**\n       * Prioritise tree animations\n       */\n      if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n        return;\n      } else if (shouldStackAnimate) {\n        _this.isAnimatingTree = true;\n      }\n      /**\n       * Allow the measured origin (prev bounding box) and target (actual layout) to be\n       * overridden by the provided config.\n       */\n      origin = originBox || origin;\n      target = targetBox || target;\n      /**\n       * If this element has a projecting parent, there's an opportunity to animate\n       * it relatively to that parent rather than relatively to the viewport. This\n       * allows us to add orchestrated animations.\n       */\n      var isRelative = false;\n      var projectionParent = visualElement.getProjectionParent();\n      if (projectionParent) {\n        var prevParentViewportBox = projectionParent.prevViewportBox;\n        var parentLayout = projectionParent.getLayoutState().layout;\n        /**\n         * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n         */\n        if (prevParent) {\n          /**\n           * If we've been provided an explicit target box it means we're animating back\n           * to this previous parent. So we can make a relative box by comparing to the previous\n           * parent's layout\n           */\n          if (targetBox) {\n            parentLayout = prevParent.getLayoutState().layout;\n          }\n          /**\n           * Likewise if we've been provided an explicit origin box it means we're\n           * animating out from a different element. So we should figure out where that was\n           * on screen relative to the new parent element.\n           */\n          if (originBox && !checkIfParentHasChanged(prevParent, projectionParent) && prevParent.prevViewportBox) {\n            prevParentViewportBox = prevParent.prevViewportBox;\n          }\n        }\n        if (prevParentViewportBox && isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n          isRelative = true;\n          origin = calcRelativeOffset(prevParentViewportBox, origin);\n          target = calcRelativeOffset(parentLayout, target);\n        }\n      }\n      var boxHasMoved = hasMoved(origin, target);\n      var animations = eachAxis(function (axis) {\n        var _a, _b;\n        /**\n         * If layout is set to \"position\", we can resize the origin box based on the target\n         * box and only animate its position.\n         */\n        if (layout === \"position\") {\n          var targetLength = target[axis].max - target[axis].min;\n          origin[axis].max = origin[axis].min + targetLength;\n        }\n        if (visualElement.projection.isTargetLocked) {\n          return;\n        } else if (visibilityAction !== undefined) {\n          visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n        } else if (boxHasMoved) {\n          // If the box has moved, animate between it's current visual state and its\n          // final state\n          return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), {\n            isRelative: isRelative\n          }));\n        } else {\n          (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n          // If the box has remained in the same place, immediately set the axis target\n          // to the final desired state\n          return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n        }\n      });\n      // Force a render to ensure there's no flash of uncorrected bounding box.\n      visualElement.syncRender();\n      /**\n       * If this visualElement isn't present (ie it's been removed from the tree by the user but\n       * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n       * have successfully finished.\n       */\n      return Promise.all(animations).then(function () {\n        _this.isAnimatingTree = false;\n        onComplete && onComplete();\n        visualElement.notifyLayoutAnimationComplete();\n      });\n    };\n    return _this;\n  }\n  Animate.prototype.componentDidMount = function () {\n    var _this = this;\n    var visualElement = this.props.visualElement;\n    visualElement.animateMotionValue = startAnimation;\n    visualElement.enableLayoutProjection();\n    this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n    visualElement.layoutSafeToRemove = function () {\n      return _this.safeToRemove();\n    };\n    addScaleCorrection(defaultScaleCorrectors);\n  };\n  Animate.prototype.componentWillUnmount = function () {\n    var _this = this;\n    this.unsubLayoutReady();\n    eachAxis(function (axis) {\n      var _a, _b;\n      return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n    });\n  };\n  /**\n   * TODO: This manually performs animations on the visualElement's layout progress\n   * values. It'd be preferable to amend the startLayoutAxisAnimation\n   * API to accept more custom animations like this.\n   */\n  Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n    var _this = this;\n    var _b, _c;\n    var _d = _a === void 0 ? {} : _a,\n      transition = _d.transition,\n      isRelative = _d.isRelative;\n    /**\n     * If we're not animating to a new target, don't run this animation\n     */\n    if (this.isAnimating[axis] && axisIsEqual(target, this.currentAnimationTarget[axis])) {\n      return;\n    }\n    (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n    this.isAnimating[axis] = true;\n    var visualElement = this.props.visualElement;\n    var frameTarget = this.frameTarget[axis];\n    var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n    /**\n     * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n     * be re-incoporated into a subsequent spring animation.\n     */\n    layoutProgress.clearListeners();\n    layoutProgress.set(0);\n    layoutProgress.set(0);\n    /**\n     * Create an animation function to run once per frame. This will tween the visual bounding box from\n     * origin to target using the latest progress value.\n     */\n    var frame = function () {\n      // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n      var p = layoutProgress.get() / progressTarget;\n      // Tween the axis and update the visualElement with the latest values\n      tweenAxis(frameTarget, origin, target, p);\n      visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n    };\n    // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n    frame();\n    // Create a function to stop animation on this specific axis\n    var unsubscribeProgress = layoutProgress.onChange(frame);\n    this.stopAxisAnimation[axis] = function () {\n      _this.isAnimating[axis] = false;\n      layoutProgress.stop();\n      unsubscribeProgress();\n    };\n    this.currentAnimationTarget[axis] = target;\n    var layoutTransition = transition || visualElement.getDefaultTransition() || defaultLayoutTransition;\n    // Start the animation on this axis\n    var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n    return animation;\n  };\n  Animate.prototype.safeToRemove = function () {\n    var _a, _b;\n    (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n  Animate.prototype.render = function () {\n    return null;\n  };\n  return Animate;\n}(React.Component);\nfunction AnimateLayoutContextProvider(props) {\n  var _a = __read(usePresence(), 2),\n    safeToRemove = _a[1];\n  return React.createElement(Animate, __assign({}, props, {\n    safeToRemove: safeToRemove\n  }));\n}\nfunction hasMoved(a, b) {\n  return !isZeroBox(a) && !isZeroBox(b) && (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y));\n}\nvar zeroAxis = {\n  min: 0,\n  max: 0\n};\nfunction isZeroBox(a) {\n  return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n  return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n  duration: 0.45,\n  ease: [0.4, 0, 0.1, 1]\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n  return prevParent || !prevParent && !(originBox || targetBox);\n}\nexport { AnimateLayoutContextProvider };","map":{"version":3,"names":["__extends","__rest","__assign","__read","React","eachAxis","startAnimation","getValueTransition","checkIfParentHasChanged","calcRelativeOffset","tweenAxis","VisibilityAction","usePresence","axisBox","addScaleCorrection","defaultScaleCorrectors","progressTarget","Animate","_super","_this","apply","arguments","frameTarget","currentAnimationTarget","isAnimating","x","y","stopAxisAnimation","undefined","isAnimatingTree","animate","target","origin","_a","originBox","targetBox","visibilityAction","shouldStackAnimate","onComplete","prevParent","config","_b","props","visualElement","layout","safeToRemove","isRelative","projectionParent","getProjectionParent","prevParentViewportBox","prevViewportBox","parentLayout","getLayoutState","isProvidedCorrectDataForRelativeSharedLayout","boxHasMoved","hasMoved","animations","axis","targetLength","max","min","projection","isTargetLocked","setVisibility","Show","animateAxis","call","setProjectionTargetAxis","syncRender","Promise","all","then","notifyLayoutAnimationComplete","prototype","componentDidMount","animateMotionValue","enableLayoutProjection","unsubLayoutReady","onLayoutUpdate","layoutSafeToRemove","componentWillUnmount","_c","_d","transition","axisIsEqual","layoutProgress","getProjectionAnimationProgress","clearListeners","set","frame","p","get","unsubscribeProgress","onChange","stop","layoutTransition","getDefaultTransition","defaultLayoutTransition","animation","render","Component","AnimateLayoutContextProvider","createElement","a","b","isZeroBox","zeroAxis","duration","ease"],"sources":["C:/Users/prana/repos/personalgpt/.yarn/__virtual__/framer-motion-virtual-4606bf46ad/3/AppData/Local/Yarn/Berry/cache/framer-motion-npm-4.1.17-00d2b9950f-10c0.zip/node_modules/framer-motion/dist/es/motion/features/layout/Animate.js"],"sourcesContent":["import { __extends, __rest, __assign, __read } from 'tslib';\nimport * as React from 'react';\nimport { eachAxis } from '../../../utils/each-axis.js';\nimport { startAnimation, getValueTransition } from '../../../animation/utils/transitions.js';\nimport { checkIfParentHasChanged, calcRelativeOffset, tweenAxis } from './utils.js';\nimport { VisibilityAction } from '../../../components/AnimateSharedLayout/types.js';\nimport { usePresence } from '../../../components/AnimatePresence/use-presence.js';\nimport { axisBox } from '../../../utils/geometry/index.js';\nimport { addScaleCorrection } from '../../../render/dom/projection/scale-correction.js';\nimport { defaultScaleCorrectors } from '../../../render/dom/projection/default-scale-correctors.js';\n\nvar progressTarget = 1000;\nvar Animate = /** @class */ (function (_super) {\n    __extends(Animate, _super);\n    function Animate() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /**\n         * A mutable object that tracks the target viewport box\n         * for the current animation frame.\n         */\n        _this.frameTarget = axisBox();\n        /**\n         * The current animation target, we use this to check whether to start\n         * a new animation or continue the existing one.\n         */\n        _this.currentAnimationTarget = axisBox();\n        /**\n         * Track whether we're animating this axis.\n         */\n        _this.isAnimating = {\n            x: false,\n            y: false,\n        };\n        _this.stopAxisAnimation = {\n            x: undefined,\n            y: undefined,\n        };\n        _this.isAnimatingTree = false;\n        _this.animate = function (target, origin, _a) {\n            if (_a === void 0) { _a = {}; }\n            var originBox = _a.originBox, targetBox = _a.targetBox, visibilityAction = _a.visibilityAction, shouldStackAnimate = _a.shouldStackAnimate, onComplete = _a.onComplete, prevParent = _a.prevParent, config = __rest(_a, [\"originBox\", \"targetBox\", \"visibilityAction\", \"shouldStackAnimate\", \"onComplete\", \"prevParent\"]);\n            var _b = _this.props, visualElement = _b.visualElement, layout = _b.layout;\n            /**\n             * Early return if we've been instructed not to animate this render.\n             */\n            if (shouldStackAnimate === false) {\n                _this.isAnimatingTree = false;\n                return _this.safeToRemove();\n            }\n            /**\n             * Prioritise tree animations\n             */\n            if (_this.isAnimatingTree && shouldStackAnimate !== true) {\n                return;\n            }\n            else if (shouldStackAnimate) {\n                _this.isAnimatingTree = true;\n            }\n            /**\n             * Allow the measured origin (prev bounding box) and target (actual layout) to be\n             * overridden by the provided config.\n             */\n            origin = originBox || origin;\n            target = targetBox || target;\n            /**\n             * If this element has a projecting parent, there's an opportunity to animate\n             * it relatively to that parent rather than relatively to the viewport. This\n             * allows us to add orchestrated animations.\n             */\n            var isRelative = false;\n            var projectionParent = visualElement.getProjectionParent();\n            if (projectionParent) {\n                var prevParentViewportBox = projectionParent.prevViewportBox;\n                var parentLayout = projectionParent.getLayoutState().layout;\n                /**\n                 * If we're being provided a previous parent VisualElement by AnimateSharedLayout\n                 */\n                if (prevParent) {\n                    /**\n                     * If we've been provided an explicit target box it means we're animating back\n                     * to this previous parent. So we can make a relative box by comparing to the previous\n                     * parent's layout\n                     */\n                    if (targetBox) {\n                        parentLayout = prevParent.getLayoutState().layout;\n                    }\n                    /**\n                     * Likewise if we've been provided an explicit origin box it means we're\n                     * animating out from a different element. So we should figure out where that was\n                     * on screen relative to the new parent element.\n                     */\n                    if (originBox &&\n                        !checkIfParentHasChanged(prevParent, projectionParent) &&\n                        prevParent.prevViewportBox) {\n                        prevParentViewportBox = prevParent.prevViewportBox;\n                    }\n                }\n                if (prevParentViewportBox &&\n                    isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox)) {\n                    isRelative = true;\n                    origin = calcRelativeOffset(prevParentViewportBox, origin);\n                    target = calcRelativeOffset(parentLayout, target);\n                }\n            }\n            var boxHasMoved = hasMoved(origin, target);\n            var animations = eachAxis(function (axis) {\n                var _a, _b;\n                /**\n                 * If layout is set to \"position\", we can resize the origin box based on the target\n                 * box and only animate its position.\n                 */\n                if (layout === \"position\") {\n                    var targetLength = target[axis].max - target[axis].min;\n                    origin[axis].max = origin[axis].min + targetLength;\n                }\n                if (visualElement.projection.isTargetLocked) {\n                    return;\n                }\n                else if (visibilityAction !== undefined) {\n                    visualElement.setVisibility(visibilityAction === VisibilityAction.Show);\n                }\n                else if (boxHasMoved) {\n                    // If the box has moved, animate between it's current visual state and its\n                    // final state\n                    return _this.animateAxis(axis, target[axis], origin[axis], __assign(__assign({}, config), { isRelative: isRelative }));\n                }\n                else {\n                    (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a);\n                    // If the box has remained in the same place, immediately set the axis target\n                    // to the final desired state\n                    return visualElement.setProjectionTargetAxis(axis, target[axis].min, target[axis].max, isRelative);\n                }\n            });\n            // Force a render to ensure there's no flash of uncorrected bounding box.\n            visualElement.syncRender();\n            /**\n             * If this visualElement isn't present (ie it's been removed from the tree by the user but\n             * kept in by the tree by AnimatePresence) then call safeToRemove when all axis animations\n             * have successfully finished.\n             */\n            return Promise.all(animations).then(function () {\n                _this.isAnimatingTree = false;\n                onComplete && onComplete();\n                visualElement.notifyLayoutAnimationComplete();\n            });\n        };\n        return _this;\n    }\n    Animate.prototype.componentDidMount = function () {\n        var _this = this;\n        var visualElement = this.props.visualElement;\n        visualElement.animateMotionValue = startAnimation;\n        visualElement.enableLayoutProjection();\n        this.unsubLayoutReady = visualElement.onLayoutUpdate(this.animate);\n        visualElement.layoutSafeToRemove = function () { return _this.safeToRemove(); };\n        addScaleCorrection(defaultScaleCorrectors);\n    };\n    Animate.prototype.componentWillUnmount = function () {\n        var _this = this;\n        this.unsubLayoutReady();\n        eachAxis(function (axis) { var _a, _b; return (_b = (_a = _this.stopAxisAnimation)[axis]) === null || _b === void 0 ? void 0 : _b.call(_a); });\n    };\n    /**\n     * TODO: This manually performs animations on the visualElement's layout progress\n     * values. It'd be preferable to amend the startLayoutAxisAnimation\n     * API to accept more custom animations like this.\n     */\n    Animate.prototype.animateAxis = function (axis, target, origin, _a) {\n        var _this = this;\n        var _b, _c;\n        var _d = _a === void 0 ? {} : _a, transition = _d.transition, isRelative = _d.isRelative;\n        /**\n         * If we're not animating to a new target, don't run this animation\n         */\n        if (this.isAnimating[axis] &&\n            axisIsEqual(target, this.currentAnimationTarget[axis])) {\n            return;\n        }\n        (_c = (_b = this.stopAxisAnimation)[axis]) === null || _c === void 0 ? void 0 : _c.call(_b);\n        this.isAnimating[axis] = true;\n        var visualElement = this.props.visualElement;\n        var frameTarget = this.frameTarget[axis];\n        var layoutProgress = visualElement.getProjectionAnimationProgress()[axis];\n        /**\n         * Set layout progress back to 0. We set it twice to hard-reset any velocity that might\n         * be re-incoporated into a subsequent spring animation.\n         */\n        layoutProgress.clearListeners();\n        layoutProgress.set(0);\n        layoutProgress.set(0);\n        /**\n         * Create an animation function to run once per frame. This will tween the visual bounding box from\n         * origin to target using the latest progress value.\n         */\n        var frame = function () {\n            // Convert the latest layoutProgress, which is a value from 0-1000, into a 0-1 progress\n            var p = layoutProgress.get() / progressTarget;\n            // Tween the axis and update the visualElement with the latest values\n            tweenAxis(frameTarget, origin, target, p);\n            visualElement.setProjectionTargetAxis(axis, frameTarget.min, frameTarget.max, isRelative);\n        };\n        // Synchronously run a frame to ensure there's no flash of the uncorrected bounding box.\n        frame();\n        // Create a function to stop animation on this specific axis\n        var unsubscribeProgress = layoutProgress.onChange(frame);\n        this.stopAxisAnimation[axis] = function () {\n            _this.isAnimating[axis] = false;\n            layoutProgress.stop();\n            unsubscribeProgress();\n        };\n        this.currentAnimationTarget[axis] = target;\n        var layoutTransition = transition ||\n            visualElement.getDefaultTransition() ||\n            defaultLayoutTransition;\n        // Start the animation on this axis\n        var animation = startAnimation(axis === \"x\" ? \"layoutX\" : \"layoutY\", layoutProgress, progressTarget, layoutTransition && getValueTransition(layoutTransition, \"layout\")).then(this.stopAxisAnimation[axis]);\n        return animation;\n    };\n    Animate.prototype.safeToRemove = function () {\n        var _a, _b;\n        (_b = (_a = this.props).safeToRemove) === null || _b === void 0 ? void 0 : _b.call(_a);\n    };\n    Animate.prototype.render = function () {\n        return null;\n    };\n    return Animate;\n}(React.Component));\nfunction AnimateLayoutContextProvider(props) {\n    var _a = __read(usePresence(), 2), safeToRemove = _a[1];\n    return React.createElement(Animate, __assign({}, props, { safeToRemove: safeToRemove }));\n}\nfunction hasMoved(a, b) {\n    return (!isZeroBox(a) &&\n        !isZeroBox(b) &&\n        (!axisIsEqual(a.x, b.x) || !axisIsEqual(a.y, b.y)));\n}\nvar zeroAxis = { min: 0, max: 0 };\nfunction isZeroBox(a) {\n    return axisIsEqual(a.x, zeroAxis) && axisIsEqual(a.y, zeroAxis);\n}\nfunction axisIsEqual(a, b) {\n    return a.min === b.min && a.max === b.max;\n}\nvar defaultLayoutTransition = {\n    duration: 0.45,\n    ease: [0.4, 0, 0.1, 1],\n};\nfunction isProvidedCorrectDataForRelativeSharedLayout(prevParent, originBox, targetBox) {\n    return prevParent || (!prevParent && !(originBox || targetBox));\n}\n\nexport { AnimateLayoutContextProvider };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC3D,OAAO,KAAKC,KAAK,MAAM,OAAO;AAC9B,SAASC,QAAQ,QAAQ,6BAA6B;AACtD,SAASC,cAAc,EAAEC,kBAAkB,QAAQ,yCAAyC;AAC5F,SAASC,uBAAuB,EAAEC,kBAAkB,EAAEC,SAAS,QAAQ,YAAY;AACnF,SAASC,gBAAgB,QAAQ,kDAAkD;AACnF,SAASC,WAAW,QAAQ,qDAAqD;AACjF,SAASC,OAAO,QAAQ,kCAAkC;AAC1D,SAASC,kBAAkB,QAAQ,oDAAoD;AACvF,SAASC,sBAAsB,QAAQ,4DAA4D;AAEnG,IAAIC,cAAc,GAAG,IAAI;AACzB,IAAIC,OAAO,GAAG,aAAe,UAAUC,MAAM,EAAE;EAC3ClB,SAAS,CAACiB,OAAO,EAAEC,MAAM,CAAC;EAC1B,SAASD,OAAOA,CAAA,EAAG;IACf,IAAIE,KAAK,GAAGD,MAAM,KAAK,IAAI,IAAIA,MAAM,CAACE,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC,IAAI,IAAI;IACpE;AACR;AACA;AACA;IACQF,KAAK,CAACG,WAAW,GAAGT,OAAO,CAAC,CAAC;IAC7B;AACR;AACA;AACA;IACQM,KAAK,CAACI,sBAAsB,GAAGV,OAAO,CAAC,CAAC;IACxC;AACR;AACA;IACQM,KAAK,CAACK,WAAW,GAAG;MAChBC,CAAC,EAAE,KAAK;MACRC,CAAC,EAAE;IACP,CAAC;IACDP,KAAK,CAACQ,iBAAiB,GAAG;MACtBF,CAAC,EAAEG,SAAS;MACZF,CAAC,EAAEE;IACP,CAAC;IACDT,KAAK,CAACU,eAAe,GAAG,KAAK;IAC7BV,KAAK,CAACW,OAAO,GAAG,UAAUC,MAAM,EAAEC,MAAM,EAAEC,EAAE,EAAE;MAC1C,IAAIA,EAAE,KAAK,KAAK,CAAC,EAAE;QAAEA,EAAE,GAAG,CAAC,CAAC;MAAE;MAC9B,IAAIC,SAAS,GAAGD,EAAE,CAACC,SAAS;QAAEC,SAAS,GAAGF,EAAE,CAACE,SAAS;QAAEC,gBAAgB,GAAGH,EAAE,CAACG,gBAAgB;QAAEC,kBAAkB,GAAGJ,EAAE,CAACI,kBAAkB;QAAEC,UAAU,GAAGL,EAAE,CAACK,UAAU;QAAEC,UAAU,GAAGN,EAAE,CAACM,UAAU;QAAEC,MAAM,GAAGvC,MAAM,CAACgC,EAAE,EAAE,CAAC,WAAW,EAAE,WAAW,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,YAAY,EAAE,YAAY,CAAC,CAAC;MACzT,IAAIQ,EAAE,GAAGtB,KAAK,CAACuB,KAAK;QAAEC,aAAa,GAAGF,EAAE,CAACE,aAAa;QAAEC,MAAM,GAAGH,EAAE,CAACG,MAAM;MAC1E;AACZ;AACA;MACY,IAAIP,kBAAkB,KAAK,KAAK,EAAE;QAC9BlB,KAAK,CAACU,eAAe,GAAG,KAAK;QAC7B,OAAOV,KAAK,CAAC0B,YAAY,CAAC,CAAC;MAC/B;MACA;AACZ;AACA;MACY,IAAI1B,KAAK,CAACU,eAAe,IAAIQ,kBAAkB,KAAK,IAAI,EAAE;QACtD;MACJ,CAAC,MACI,IAAIA,kBAAkB,EAAE;QACzBlB,KAAK,CAACU,eAAe,GAAG,IAAI;MAChC;MACA;AACZ;AACA;AACA;MACYG,MAAM,GAAGE,SAAS,IAAIF,MAAM;MAC5BD,MAAM,GAAGI,SAAS,IAAIJ,MAAM;MAC5B;AACZ;AACA;AACA;AACA;MACY,IAAIe,UAAU,GAAG,KAAK;MACtB,IAAIC,gBAAgB,GAAGJ,aAAa,CAACK,mBAAmB,CAAC,CAAC;MAC1D,IAAID,gBAAgB,EAAE;QAClB,IAAIE,qBAAqB,GAAGF,gBAAgB,CAACG,eAAe;QAC5D,IAAIC,YAAY,GAAGJ,gBAAgB,CAACK,cAAc,CAAC,CAAC,CAACR,MAAM;QAC3D;AAChB;AACA;QACgB,IAAIL,UAAU,EAAE;UACZ;AACpB;AACA;AACA;AACA;UACoB,IAAIJ,SAAS,EAAE;YACXgB,YAAY,GAAGZ,UAAU,CAACa,cAAc,CAAC,CAAC,CAACR,MAAM;UACrD;UACA;AACpB;AACA;AACA;AACA;UACoB,IAAIV,SAAS,IACT,CAAC1B,uBAAuB,CAAC+B,UAAU,EAAEQ,gBAAgB,CAAC,IACtDR,UAAU,CAACW,eAAe,EAAE;YAC5BD,qBAAqB,GAAGV,UAAU,CAACW,eAAe;UACtD;QACJ;QACA,IAAID,qBAAqB,IACrBI,4CAA4C,CAACd,UAAU,EAAEL,SAAS,EAAEC,SAAS,CAAC,EAAE;UAChFW,UAAU,GAAG,IAAI;UACjBd,MAAM,GAAGvB,kBAAkB,CAACwC,qBAAqB,EAAEjB,MAAM,CAAC;UAC1DD,MAAM,GAAGtB,kBAAkB,CAAC0C,YAAY,EAAEpB,MAAM,CAAC;QACrD;MACJ;MACA,IAAIuB,WAAW,GAAGC,QAAQ,CAACvB,MAAM,EAAED,MAAM,CAAC;MAC1C,IAAIyB,UAAU,GAAGnD,QAAQ,CAAC,UAAUoD,IAAI,EAAE;QACtC,IAAIxB,EAAE,EAAEQ,EAAE;QACV;AAChB;AACA;AACA;QACgB,IAAIG,MAAM,KAAK,UAAU,EAAE;UACvB,IAAIc,YAAY,GAAG3B,MAAM,CAAC0B,IAAI,CAAC,CAACE,GAAG,GAAG5B,MAAM,CAAC0B,IAAI,CAAC,CAACG,GAAG;UACtD5B,MAAM,CAACyB,IAAI,CAAC,CAACE,GAAG,GAAG3B,MAAM,CAACyB,IAAI,CAAC,CAACG,GAAG,GAAGF,YAAY;QACtD;QACA,IAAIf,aAAa,CAACkB,UAAU,CAACC,cAAc,EAAE;UACzC;QACJ,CAAC,MACI,IAAI1B,gBAAgB,KAAKR,SAAS,EAAE;UACrCe,aAAa,CAACoB,aAAa,CAAC3B,gBAAgB,KAAKzB,gBAAgB,CAACqD,IAAI,CAAC;QAC3E,CAAC,MACI,IAAIV,WAAW,EAAE;UAClB;UACA;UACA,OAAOnC,KAAK,CAAC8C,WAAW,CAACR,IAAI,EAAE1B,MAAM,CAAC0B,IAAI,CAAC,EAAEzB,MAAM,CAACyB,IAAI,CAAC,EAAEvD,QAAQ,CAACA,QAAQ,CAAC,CAAC,CAAC,EAAEsC,MAAM,CAAC,EAAE;YAAEM,UAAU,EAAEA;UAAW,CAAC,CAAC,CAAC;QAC1H,CAAC,MACI;UACD,CAACL,EAAE,GAAG,CAACR,EAAE,GAAGd,KAAK,CAACQ,iBAAiB,EAAE8B,IAAI,CAAC,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyB,IAAI,CAACjC,EAAE,CAAC;UAC5F;UACA;UACA,OAAOU,aAAa,CAACwB,uBAAuB,CAACV,IAAI,EAAE1B,MAAM,CAAC0B,IAAI,CAAC,CAACG,GAAG,EAAE7B,MAAM,CAAC0B,IAAI,CAAC,CAACE,GAAG,EAAEb,UAAU,CAAC;QACtG;MACJ,CAAC,CAAC;MACF;MACAH,aAAa,CAACyB,UAAU,CAAC,CAAC;MAC1B;AACZ;AACA;AACA;AACA;MACY,OAAOC,OAAO,CAACC,GAAG,CAACd,UAAU,CAAC,CAACe,IAAI,CAAC,YAAY;QAC5CpD,KAAK,CAACU,eAAe,GAAG,KAAK;QAC7BS,UAAU,IAAIA,UAAU,CAAC,CAAC;QAC1BK,aAAa,CAAC6B,6BAA6B,CAAC,CAAC;MACjD,CAAC,CAAC;IACN,CAAC;IACD,OAAOrD,KAAK;EAChB;EACAF,OAAO,CAACwD,SAAS,CAACC,iBAAiB,GAAG,YAAY;IAC9C,IAAIvD,KAAK,GAAG,IAAI;IAChB,IAAIwB,aAAa,GAAG,IAAI,CAACD,KAAK,CAACC,aAAa;IAC5CA,aAAa,CAACgC,kBAAkB,GAAGrE,cAAc;IACjDqC,aAAa,CAACiC,sBAAsB,CAAC,CAAC;IACtC,IAAI,CAACC,gBAAgB,GAAGlC,aAAa,CAACmC,cAAc,CAAC,IAAI,CAAChD,OAAO,CAAC;IAClEa,aAAa,CAACoC,kBAAkB,GAAG,YAAY;MAAE,OAAO5D,KAAK,CAAC0B,YAAY,CAAC,CAAC;IAAE,CAAC;IAC/E/B,kBAAkB,CAACC,sBAAsB,CAAC;EAC9C,CAAC;EACDE,OAAO,CAACwD,SAAS,CAACO,oBAAoB,GAAG,YAAY;IACjD,IAAI7D,KAAK,GAAG,IAAI;IAChB,IAAI,CAAC0D,gBAAgB,CAAC,CAAC;IACvBxE,QAAQ,CAAC,UAAUoD,IAAI,EAAE;MAAE,IAAIxB,EAAE,EAAEQ,EAAE;MAAE,OAAO,CAACA,EAAE,GAAG,CAACR,EAAE,GAAGd,KAAK,CAACQ,iBAAiB,EAAE8B,IAAI,CAAC,MAAM,IAAI,IAAIhB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyB,IAAI,CAACjC,EAAE,CAAC;IAAE,CAAC,CAAC;EAClJ,CAAC;EACD;AACJ;AACA;AACA;AACA;EACIhB,OAAO,CAACwD,SAAS,CAACR,WAAW,GAAG,UAAUR,IAAI,EAAE1B,MAAM,EAAEC,MAAM,EAAEC,EAAE,EAAE;IAChE,IAAId,KAAK,GAAG,IAAI;IAChB,IAAIsB,EAAE,EAAEwC,EAAE;IACV,IAAIC,EAAE,GAAGjD,EAAE,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,GAAGA,EAAE;MAAEkD,UAAU,GAAGD,EAAE,CAACC,UAAU;MAAErC,UAAU,GAAGoC,EAAE,CAACpC,UAAU;IACxF;AACR;AACA;IACQ,IAAI,IAAI,CAACtB,WAAW,CAACiC,IAAI,CAAC,IACtB2B,WAAW,CAACrD,MAAM,EAAE,IAAI,CAACR,sBAAsB,CAACkC,IAAI,CAAC,CAAC,EAAE;MACxD;IACJ;IACA,CAACwB,EAAE,GAAG,CAACxC,EAAE,GAAG,IAAI,CAACd,iBAAiB,EAAE8B,IAAI,CAAC,MAAM,IAAI,IAAIwB,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACf,IAAI,CAACzB,EAAE,CAAC;IAC3F,IAAI,CAACjB,WAAW,CAACiC,IAAI,CAAC,GAAG,IAAI;IAC7B,IAAId,aAAa,GAAG,IAAI,CAACD,KAAK,CAACC,aAAa;IAC5C,IAAIrB,WAAW,GAAG,IAAI,CAACA,WAAW,CAACmC,IAAI,CAAC;IACxC,IAAI4B,cAAc,GAAG1C,aAAa,CAAC2C,8BAA8B,CAAC,CAAC,CAAC7B,IAAI,CAAC;IACzE;AACR;AACA;AACA;IACQ4B,cAAc,CAACE,cAAc,CAAC,CAAC;IAC/BF,cAAc,CAACG,GAAG,CAAC,CAAC,CAAC;IACrBH,cAAc,CAACG,GAAG,CAAC,CAAC,CAAC;IACrB;AACR;AACA;AACA;IACQ,IAAIC,KAAK,GAAG,SAAAA,CAAA,EAAY;MACpB;MACA,IAAIC,CAAC,GAAGL,cAAc,CAACM,GAAG,CAAC,CAAC,GAAG3E,cAAc;MAC7C;MACAN,SAAS,CAACY,WAAW,EAAEU,MAAM,EAAED,MAAM,EAAE2D,CAAC,CAAC;MACzC/C,aAAa,CAACwB,uBAAuB,CAACV,IAAI,EAAEnC,WAAW,CAACsC,GAAG,EAAEtC,WAAW,CAACqC,GAAG,EAAEb,UAAU,CAAC;IAC7F,CAAC;IACD;IACA2C,KAAK,CAAC,CAAC;IACP;IACA,IAAIG,mBAAmB,GAAGP,cAAc,CAACQ,QAAQ,CAACJ,KAAK,CAAC;IACxD,IAAI,CAAC9D,iBAAiB,CAAC8B,IAAI,CAAC,GAAG,YAAY;MACvCtC,KAAK,CAACK,WAAW,CAACiC,IAAI,CAAC,GAAG,KAAK;MAC/B4B,cAAc,CAACS,IAAI,CAAC,CAAC;MACrBF,mBAAmB,CAAC,CAAC;IACzB,CAAC;IACD,IAAI,CAACrE,sBAAsB,CAACkC,IAAI,CAAC,GAAG1B,MAAM;IAC1C,IAAIgE,gBAAgB,GAAGZ,UAAU,IAC7BxC,aAAa,CAACqD,oBAAoB,CAAC,CAAC,IACpCC,uBAAuB;IAC3B;IACA,IAAIC,SAAS,GAAG5F,cAAc,CAACmD,IAAI,KAAK,GAAG,GAAG,SAAS,GAAG,SAAS,EAAE4B,cAAc,EAAErE,cAAc,EAAE+E,gBAAgB,IAAIxF,kBAAkB,CAACwF,gBAAgB,EAAE,QAAQ,CAAC,CAAC,CAACxB,IAAI,CAAC,IAAI,CAAC5C,iBAAiB,CAAC8B,IAAI,CAAC,CAAC;IAC3M,OAAOyC,SAAS;EACpB,CAAC;EACDjF,OAAO,CAACwD,SAAS,CAAC5B,YAAY,GAAG,YAAY;IACzC,IAAIZ,EAAE,EAAEQ,EAAE;IACV,CAACA,EAAE,GAAG,CAACR,EAAE,GAAG,IAAI,CAACS,KAAK,EAAEG,YAAY,MAAM,IAAI,IAAIJ,EAAE,KAAK,KAAK,CAAC,GAAG,KAAK,CAAC,GAAGA,EAAE,CAACyB,IAAI,CAACjC,EAAE,CAAC;EAC1F,CAAC;EACDhB,OAAO,CAACwD,SAAS,CAAC0B,MAAM,GAAG,YAAY;IACnC,OAAO,IAAI;EACf,CAAC;EACD,OAAOlF,OAAO;AAClB,CAAC,CAACb,KAAK,CAACgG,SAAS,CAAE;AACnB,SAASC,4BAA4BA,CAAC3D,KAAK,EAAE;EACzC,IAAIT,EAAE,GAAG9B,MAAM,CAACS,WAAW,CAAC,CAAC,EAAE,CAAC,CAAC;IAAEiC,YAAY,GAAGZ,EAAE,CAAC,CAAC,CAAC;EACvD,OAAO7B,KAAK,CAACkG,aAAa,CAACrF,OAAO,EAAEf,QAAQ,CAAC,CAAC,CAAC,EAAEwC,KAAK,EAAE;IAAEG,YAAY,EAAEA;EAAa,CAAC,CAAC,CAAC;AAC5F;AACA,SAASU,QAAQA,CAACgD,CAAC,EAAEC,CAAC,EAAE;EACpB,OAAQ,CAACC,SAAS,CAACF,CAAC,CAAC,IACjB,CAACE,SAAS,CAACD,CAAC,CAAC,KACZ,CAACpB,WAAW,CAACmB,CAAC,CAAC9E,CAAC,EAAE+E,CAAC,CAAC/E,CAAC,CAAC,IAAI,CAAC2D,WAAW,CAACmB,CAAC,CAAC7E,CAAC,EAAE8E,CAAC,CAAC9E,CAAC,CAAC,CAAC;AAC1D;AACA,IAAIgF,QAAQ,GAAG;EAAE9C,GAAG,EAAE,CAAC;EAAED,GAAG,EAAE;AAAE,CAAC;AACjC,SAAS8C,SAASA,CAACF,CAAC,EAAE;EAClB,OAAOnB,WAAW,CAACmB,CAAC,CAAC9E,CAAC,EAAEiF,QAAQ,CAAC,IAAItB,WAAW,CAACmB,CAAC,CAAC7E,CAAC,EAAEgF,QAAQ,CAAC;AACnE;AACA,SAAStB,WAAWA,CAACmB,CAAC,EAAEC,CAAC,EAAE;EACvB,OAAOD,CAAC,CAAC3C,GAAG,KAAK4C,CAAC,CAAC5C,GAAG,IAAI2C,CAAC,CAAC5C,GAAG,KAAK6C,CAAC,CAAC7C,GAAG;AAC7C;AACA,IAAIsC,uBAAuB,GAAG;EAC1BU,QAAQ,EAAE,IAAI;EACdC,IAAI,EAAE,CAAC,GAAG,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;AACzB,CAAC;AACD,SAASvD,4CAA4CA,CAACd,UAAU,EAAEL,SAAS,EAAEC,SAAS,EAAE;EACpF,OAAOI,UAAU,IAAK,CAACA,UAAU,IAAI,EAAEL,SAAS,IAAIC,SAAS,CAAE;AACnE;AAEA,SAASkE,4BAA4B"},"metadata":{},"sourceType":"module","externalDependencies":[]}