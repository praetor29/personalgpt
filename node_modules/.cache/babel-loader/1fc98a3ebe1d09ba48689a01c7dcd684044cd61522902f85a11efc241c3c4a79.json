{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.Polyfill = exports.LightSetImpl = void 0;\nvar Map_1 = require(\"./Map\");\nvar LightSetImpl = /** @class */function () {\n  function LightSetImpl(values) {\n    this.map = new Map_1.Polyfill();\n    if (values === undefined) {\n      return;\n    }\n    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n      var value = values_1[_i];\n      this.add(value);\n    }\n  }\n  LightSetImpl.prototype.has = function (value) {\n    return this.map.has(value);\n  };\n  LightSetImpl.prototype.add = function (value) {\n    this.map.set(value, true);\n    return this;\n  };\n  LightSetImpl.prototype.values = function () {\n    return this.map.keys();\n  };\n  LightSetImpl.prototype[\"delete\"] = function (value) {\n    return this.map[\"delete\"](value);\n  };\n  return LightSetImpl;\n}();\nexports.LightSetImpl = LightSetImpl;\nexports.Polyfill = typeof Set !== \"undefined\" ? Set : LightSetImpl;","map":{"version":3,"names":["Map_1","require","LightSetImpl","values","map","Polyfill","undefined","_i","values_1","length","value","add","prototype","has","set","keys","exports","Set"],"sources":["C:\\Users\\prana\\AppData\\Local\\Yarn\\Berry\\cache\\minimal-polyfills-npm-2.2.3-da60ae238c-10c0.zip\\node_modules\\minimal-polyfills\\src\\Set.ts"],"sourcesContent":["\r\nimport { Polyfill as MapPolyfill } from \"./Map\";\r\n\r\nexport interface LightSet<T> {\r\n    [Symbol.toStringTag]: string;\r\n    has(value: T): boolean;\r\n    add(value: T): this;\r\n    values(): Iterable<T>;\r\n    delete(value: T): boolean;\r\n}\r\n\r\nexport class LightSetImpl<T> implements LightSet<T> {\r\n\r\n    [Symbol.toStringTag]!: string;\r\n\r\n    private readonly map= new MapPolyfill<T, true>();\r\n\r\n    constructor(values?: T[]){\r\n\r\n        if( values === undefined ){\r\n            return;\r\n        }\r\n\r\n        for( let value of values ){\r\n            this.add(value);\r\n        }\r\n\r\n    }\r\n\r\n    public has(value: T): boolean{\r\n        return this.map.has(value);\r\n    }\r\n\r\n    public add(value: T): this {\r\n        this.map.set(value, true);\r\n        return this;\r\n    }\r\n\r\n    public values(): Iterable<T> {\r\n        return this.map.keys();\r\n    }\r\n\r\n    public delete(value: T): boolean {\r\n        return this.map.delete(value);\r\n    }\r\n\r\n}\r\n\r\nexport const Polyfill: { new<T>(values?: T[]): LightSet<T> } = \r\n    typeof Set !== \"undefined\" ? Set : LightSetImpl;\r\n"],"mappings":";;;;AACA,IAAAA,KAAA,GAAAC,OAAA;AAUA,IAAAC,YAAA;EAMI,SAAAA,aAAYC,MAAY;IAFP,KAAAC,GAAG,GAAE,IAAIJ,KAAA,CAAAK,QAAW,EAAW;IAI5C,IAAIF,MAAM,KAAKG,SAAS,EAAE;MACtB;;IAGJ,KAAkB,IAAAC,EAAA,IAAM,EAANC,QAAA,GAAAL,MAAM,EAANI,EAAA,GAAAC,QAAA,CAAAC,MAAM,EAANF,EAAA,EAAM,EAAE;MAArB,IAAIG,KAAK,GAAAF,QAAA,CAAAD,EAAA;MACV,IAAI,CAACI,GAAG,CAACD,KAAK,CAAC;;EAGvB;EAEOR,YAAA,CAAAU,SAAA,CAAAC,GAAG,GAAV,UAAWH,KAAQ;IACf,OAAO,IAAI,CAACN,GAAG,CAACS,GAAG,CAACH,KAAK,CAAC;EAC9B,CAAC;EAEMR,YAAA,CAAAU,SAAA,CAAAD,GAAG,GAAV,UAAWD,KAAQ;IACf,IAAI,CAACN,GAAG,CAACU,GAAG,CAACJ,KAAK,EAAE,IAAI,CAAC;IACzB,OAAO,IAAI;EACf,CAAC;EAEMR,YAAA,CAAAU,SAAA,CAAAT,MAAM,GAAb;IACI,OAAO,IAAI,CAACC,GAAG,CAACW,IAAI,EAAE;EAC1B,CAAC;EAEMb,YAAA,CAAAU,SAAA,SAAM,IAAb,UAAcF,KAAQ;IAClB,OAAO,IAAI,CAACN,GAAG,CAAC,QAAM,EAACM,KAAK,CAAC;EACjC,CAAC;EAEL,OAAAR,YAAC;AAAD,CAAC,CAnCD;AAAac,OAAA,CAAAd,YAAA,GAAAA,YAAA;AAqCAc,OAAA,CAAAX,QAAQ,GACjB,OAAOY,GAAG,KAAK,WAAW,GAAGA,GAAG,GAAGf,YAAY"},"metadata":{},"sourceType":"script","externalDependencies":[]}